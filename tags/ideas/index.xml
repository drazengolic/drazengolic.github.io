<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ideas on Drazen Golic</title>
    <link>https://www.drazengolic.com/tags/ideas/</link>
    <description>Recent content in Ideas on Drazen Golic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>&amp;copy; Drazen Golic ([CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.en))</copyright>
    <lastBuildDate>Tue, 08 Apr 2025 22:19:28 +0200</lastBuildDate><atom:link href="https://www.drazengolic.com/tags/ideas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Committing upfront</title>
      <link>https://www.drazengolic.com/blog/committing-upfront/</link>
      <pubDate>Tue, 08 Apr 2025 22:19:28 +0200</pubDate>
      <author>Drazen Golic</author>
      <guid>https://www.drazengolic.com/blog/committing-upfront/</guid>
      <description>Introduction You might be working in a feature factory. Or you&rsquo;re a consultant that has to juggle multiple projects at once. Just when you&rsquo;re in the middle of doing something important, something else suddenly needs immediate attention. And once you&rsquo;re back, you have no clue what you&rsquo;ve been up to - the context switching has screwed you up once again. Couple of those in a short timeframe, and you start questioning the life itself. (by you I mean me)
</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>You might be working in a <a href="https://medium.com/@johnpcutler/12-signs-youre-working-in-a-feature-factory-44a5b938d6a2">feature factory</a>. Or you&rsquo;re a consultant that has to juggle multiple projects at once. Just when you&rsquo;re in the middle of doing something important, something else suddenly needs immediate attention. And once you&rsquo;re back, you have no clue what you&rsquo;ve been up to - the <a href="https://simpleprogrammer.com/context-switching/">context switching</a> has screwed you up once again. Couple of those in a short timeframe, and you start questioning the life itself. (by <em>you</em> I mean <em>me</em>)</p>
<p>And what you&rsquo;ve been doing was a no easy task - you were adding features to the worst codebase that you&rsquo;ve ever seen. Many moving parts, many things to keep in your head. As if getting into it <em>once</em> wasn&rsquo;t big enough of a curse, you have to do it multiple times <em>a day</em>. But you&rsquo;re a professional and an adult, so you <strong>will</strong> deliver.</p>
<p>You&rsquo;re also expected to provide a detailed changelist of the things you did, so that they could be reviewed easier.</p>
<h2 id="now-where-was-i">&ldquo;Now where was I&hellip;&rdquo;&quot;</h2>
<p>Every time you get back to what you&rsquo;ve been doing, you have to go through the most of the code changes made previously, so you&rsquo;d get the idea where the things are standing. And if you write your changelist after the coding is done, you&rsquo;ll have to go through the changes once again in order to provide some meaningful list of descriptions.</p>
<p>Wouldn&rsquo;t it be more helpful if at least some of those descriptions were already there every time you get back to the task?</p>
<h2 id="tlc---think-it-log-it-change-it">TLC - Think it, Log it, Change it</h2>
<p>It ain&rsquo;t a method if it doesn&rsquo;t have an acronym, amirite?</p>
<p>Thinking upfront isn&rsquo;t an easy thing, especially when there&rsquo;s a lot to do, or you aren&rsquo;t sure where to start. Jumping right into coding makes you feel that you aren&rsquo;t procrastinating on the work, but it&rsquo;s easy to lose focus once you realize that you&rsquo;ve taken on too many things at once and now have to manage contexts within contexts in your head. This is a state of mind where shattering of a thougth process with a benign question over Slack can feel so irritating that you could just punch the other person right in their stupid face if they happened to be sitting right next to you (or that&rsquo;s just me again lol).</p>
<p>Giving some thought upfront and writing down your next steps will help you to maintain focus. But it&rsquo;s easy to forget about writing things down, or to neglect the value of doing it. So it&rsquo;s a discipline that has to be learned and maintained. An &ldquo;acquired taste&rdquo; so to speak. And you don&rsquo;t need to get things right the first time you write them down. You&rsquo;re free to change the text as you progress, nothing was carved in stone (or in a commit message).</p>
<p>As a bonus, your notes will be waiting for you to skim trough them when you get back to the task after a while, like a to-do list. And chances are, they&rsquo;ll be much shorter and concise compared to going trough the code all over again.</p>
<h2 id="but-its-a-chore">But it&rsquo;s a chore</h2>
<p>Unless you&rsquo;re really organized and maintain your notes in a clean and accessible way, finding and then editing a correct to-do list could become a chore, especially if you need to do it quickly. This is where the general purpose (usually web based) to-do software falls short. There are also CLI apps, but they are also general purposed most of the time, and may not be easy to use.</p>
<p>Maintaining a text file or a spreadsheet per project, split into sections that represent feature branches, is probably the easiest way to put this into practice, though it&rsquo;s not ideal if you&rsquo;d like to get some more insight into the work done.</p>
<p>I&rsquo;ve took all of the above into account when I&rsquo;ve decided to create <a href="https://github.com/drazengolic/gitodo">gitodo</a> as a dedicated tool to help me maintain my focus at work.</p>
<h2 id="gitodo">gitodo?</h2>
<p>I know, I know, yet another to-do list app&hellip; And to make things worse, I used it as an excuse to finally put Go and SQLite into practice.</p>
<p>But it does address some unique concerns that I wasn&rsquo;t able to address with the text files or existing to-do apps:</p>
<ul>
<li>I want to be able to retrieve my to-do list for my feature branch anywhere within the git repository without having to type a lot, or having to scroll trough a document in another window</li>
<li>No special tags or queries, just a dumb list that is easy to manipulate via TUI screen</li>
<li>Nothing beats a proper editor for editing text (well, obviously), so it has to invoke an editor when items have to be added or edited rather than me creating some crippled version of nano (vim users may find this rather appealing). It should use the same one that is configured for git</li>
<li>I also want to be able to use my completed items when crafting a commit message. It should also take into account of what was already committed, so it doesn&rsquo;t offer the same items again</li>
<li>Stash management. Ability to link a stash to a to-do item as a form of &ldquo;checkpoint&rdquo;</li>
<li>I&rsquo;d also like to see a report on what I&rsquo;ve been working on recently, so I could quickly glance over it when interrupted with a (daily) meeting. Or have some way to automatically export that data and push it somewhere else</li>
<li>Time tracking was not a necessity, but I thought it would be a neat feature to add, especially if you&rsquo;re billing per hour</li>
<li>Zero config files. All necessary information is obtained from git and the environment.</li>
<li>Also no files stored in git repositories, though this might be reconsidered later</li>
<li>Opinionated and minimal, no hundreds of features configured with yaml</li>
</ul>
<p>If you like the idea, head over to <a href="https://www.drazengolic.com/gitodo/">the docs</a> and give it a spin. Unfortunately, you&rsquo;ll need Go and GCC to build it, as it&rsquo;s not officially packaged for any platform yet. I still consider it as a proof-of-concept, though it&rsquo;s perfectly usable and mostly feature complete at this point (I use it at work btw). It&rsquo;s free and open source.</p>
<h2 id="conclusion">Conclusion</h2>
<p>If you&rsquo;re struggling with context switching or with maintaining focus, give some &ldquo;committing upfront&rdquo; in the form of a to-do list a try, and see if it makes a difference. I&rsquo;ll be honest and say that I haven&rsquo;t developed my discipline around it yet, since I&rsquo;m not practicing it for every task I have to do, especially if I&rsquo;m doing things intended for mindless code monkeys. But once I do, thinking about things upfront and writing them down usually leads to more quality output.</p>
<h2 id="ps">P.S.</h2>
<p>There was a local meetup some time ago where a guy gave a talk about writing commit messages upfront for similar reasons
discussed above. I wasn&rsquo;t aware of it, a friend of mine mentioned it to me recently. So this isn&rsquo;t anything new, just a bit different approach. If I ever find out who it was, or find any posts/videos from it, I&rsquo;ll post them here.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Roll your own methodology</title>
      <link>https://www.drazengolic.com/blog/roll-your-own-methodology/</link>
      <pubDate>Thu, 01 Aug 2024 23:04:16 +0200</pubDate>
      
      <guid>https://www.drazengolic.com/blog/roll-your-own-methodology/</guid>
      <description> I am not teaching you anything. I just help you to explore yourself.
&ndash; Bruce Lee
Now what would be a better way to start a post than to quote a childhood hero who was a martial artist, an actor, but also a philosopher - Bruce Lee! (The old movies were common on TV while I was growing up)
This is a continuation of my satirical post TDD - The Toilet-driven development, albeit in a less satirical manner.
</description>
      <content:encoded><![CDATA[<blockquote>
<p>I am not teaching you anything. I just help you to explore yourself.</p>
<p>&ndash; Bruce Lee</p></blockquote>
<p>Now what would be a better way to start a post than to quote a childhood hero who was a martial artist, an actor, but also a philosopher - Bruce Lee! (The old movies were common on TV while I was growing up)</p>
<p>This is a continuation of my satirical post <a href="https://www.drazengolic.com/blog/tdd/">TDD - The Toilet-driven development</a>, albeit in a less satirical manner.</p>
<p>I&rsquo;ve mentioned in the post how there is no right methodology to build software (especially those under the <em>Agile</em> umbrella), because they&rsquo;re being sold context-free. It&rsquo;s the context that decides whether you&rsquo;ll have success with a certain practice, but no one really knows the exact context under which a certain methodology was born (or if it&rsquo;s simply someone&rsquo;s thoughts on what <em>should</em> work).</p>
<p>Building software is a lot like a martial art. The more you practice it, the more you get better at it. That&rsquo;s right, <em>practicing</em>. Not watching some youtubers, hanging out on streams, meetups, or even reading some stupid blogs like this one. Building stuff, even if it&rsquo;s something really stupid or completely useless.</p>
<blockquote>
<p>Practice makes perfect. After a long time of practicing, our work will become natural, skillfull, swift, and steady.</p></blockquote>
<p>The term <em>martial art</em> has it&rsquo;s roots in Latin, meaning &ldquo;arts of Mars&rdquo;. And we know that Mars was a Roman god of war. Coincidentally, Erik Meijer famously <a href="https://youtu.be/2u0sNRO-QKQ">compared</a> writing software with fighting a war. And it is a fight with almost everything - fighting the language constructs, the legacy codes, design patterns out of place, web frameworks that are trying hard to be the lid for every pot, hard deadlines, &ldquo;quick changes&rdquo;, acute insufficiency of important details written down, emergency bugs, people&rsquo;s opinions, your own motivation&hellip; the list goes on. It can be quite frustrating, but it&rsquo;s the frustration that helps you learn what works and what doesn&rsquo;t in a given situation. That&rsquo;s context.</p>
<blockquote>
<p>Without frustration you will not discover that you might be able to do something on your own. We grow through conflict.</p></blockquote>
<p>The waterfall software methodology was perceived as too rigid, and the Agile movement was born as something that was supposed to be better at &ldquo;responding to change&rdquo;. But what did we get? A set of recipes consisted of questionable practices, from coding to management, that somehow should transform an organisation into a software production powerhouse. And if you fail while doing it, you &ldquo;didn&rsquo;t do it properly&rdquo;, or you have &ldquo;skill issues&rdquo;. And if you change something to accomodate to your use case, then that&rsquo;s &ldquo;not the real method X&rdquo;. What is it, then? I should remind you that there are numerous books on Scrum, which was originally a 15-page pamphlet!</p>
<p>And what do I suggest instead?</p>
<blockquote>
<p>Absorb what is useful, discard what is not, add what is uniquely your own.</p></blockquote>
<p>Rinse, repeat, and do not fear of failure.</p>
<p>There are only three important things about any piece of software:</p>
<ol>
<li>It does what it&rsquo;s supposed to do, as good as possible</li>
<li>It doesn&rsquo;t break the budget</li>
<li>Is delivered in a reasonable time frame</li>
</ol>
<p>How will you get there is not really that important, as long as you care enough to actually get there. And as I suggested many times, there is no recipe that could be followed mindlessly while expecting a successful outcome every time. It takes something that everyone desperately tries to avoid - a bit of effort.</p>
<blockquote>
<p>Only the self-sufficient stand alone - most people follow the crowd and imitate.</p></blockquote>
<p>The idea to roll your own methodology probably sounds intimidating. It could raise questions like: Where do I start? Do I have room for errors, enough time to try out things? If you&rsquo;ve experienced enough frustration with the existing stuff, you&rsquo;ll probably have an idea or two what to do differently. While I can&rsquo;t give any specific instructions, I could point out some things that frustrate <em>me in particular</em>, and maybe you&rsquo;ll be able to pick up a couple of things from there.</p>
<p>Here are some of the things I find frustrating with the existing methodologies, in no particular order:</p>
<p><strong>Form without substance</strong></p>
<p>This is something that frustrates me in general, not just in software development.</p>
<p>For example - daily meetings. Why organize meetings every day, where no one is listening to anyone, just to satisfy some prescribed form? The first thing I&rsquo;d stop doing are the meetings for the sake of meetings, or any other activity being done just because it&rsquo;s &ldquo;by the book&rdquo;. This is especially infuriating in remote teams with the big time zone difference, when you have to stay at work late in the afternoon just to satisfy some stupid formality. Now don&rsquo;t get me wrong, meetings are important, but only when they&rsquo;re <em>productive</em>. I also don&rsquo;t like the idea of having a schedule to talk about what&rsquo;s good or bad. Imo those things should be discussed as soon as they happen. And those are best to be discussed one on one with the manager, rather than in a group where you won&rsquo;t feel just as free to talk about things.</p>
<p>If you really want to spend your time fulfilling formalities with little to no sense, I suggest becoming a clerk in a state-owned institution in any of the post-communist countries in Europe. You could even earn a pension for doing it.</p>
<p><strong>Evangelism</strong></p>
<p>Do you know what actually has to be evangelized, rather than promoted? That&rsquo;s right, a religion. Or likely a cult. Did you also notice how you need to &ldquo;change your mindset&rdquo; every time they want you to swallow something that sounds downright crazy? There&rsquo;s no need to &ldquo;evangelize&rdquo; anything that sounds even remotely reasonable to most people.</p>
<p><strong>Rituals</strong></p>
<p>See above.</p>
<p><strong>Borderline psychotherapy</strong></p>
<p>Some of those agile &ldquo;gurus&rdquo; are way too enthusiastic about psychology, and I&rsquo;ve seen some collectives resembling a mental institution, or AA at least. Look pal/gal, I know that most programmers have issues, but, first and foremost, this is the workplace, and we&rsquo;re all grown-ups here. Why don&rsquo;t you go finish some college for a start, and run your sessions in your own house and leave us all alone?</p>
<p>Besides - pairing, mobing, but also sprints&hellip; all of them look like some social experiment to me (or a psyop if you will), where <em>peer pressure</em> is intelligently deployed to squeeze out the last drop of productivity juice from every programmer involved. Even the best engines will burn out if you hold the gas pedal on the floor for too long, but that doesn&rsquo;t matter if you can afford changing cars every now and then. And it&rsquo;s hard for me to understand people who actually like to program in pairs. It must be either some ego trip where one keeps showing off their skills to some junior, or the sense of accomplishment for merely giving some input while the other person is doing all the work. But the salary is in the bank account, who cares about merit anyway.</p>
<p><strong>Not giving credit</strong></p>
<p>You&rsquo;ll notice how everything is about great teamwork, team this, team that. Being selfless and all. <em>From each according to his ability, to each according to his needs</em> and similar kind of BS. Newsflash - this is <em>work</em>, and we work for <em>money</em>, and for <em>recognition</em> so we could earn even more money. This is still capitalism as far as I know, and selflessness is for religions, charities and political extremism. Give credit where credit is due, or be ready to lose people. (Just to clarify one thing - none of this justifies being a jerk to your colleagues)</p>
<p><strong>Insistence on vanity metrics</strong></p>
<p>I have a huge issue with giving importance to the test coverage. Do you know that some time ago, a programmer&rsquo;s productivity was measured by the number of lines they could output? Sounds ridiculous, right? I feel just about the same for code coverage measuring code quality. Just because some code was executed in a test, it doesn&rsquo;t mean <em>it works</em>. Those are two different things. I write tests for coverage on a daily basis. They test <em>almost nothing</em>, but that beautiful green color is everywhere. Why? Not because I want to do it that way, but because I&rsquo;m expected to do so. It&rsquo;s also funny how can you exclude code from coverage and still keep that 100%. So, is it really 100% then? What about those non-trivial tests that you wrote, what&rsquo;s testing them? Besides, there are many ways to verify that software works as expected, and not all of it has to be automated on the lowest layer you know. A pedantic QA person is sometimes more valuable than your entire test suite. But tell that to a TDD zealot and be ready for some &ldquo;skill issue&rdquo; <em>ad hominem</em> attacks.</p>
<p>Another stupid thing is the planning poker. Junior points can&rsquo;t be the same as senior points, and averaging it out will somehow make it more trustworthy? And a Fibonacci sequence lol, what&rsquo;s that for? To make it look more like it&rsquo;s rooted in math? Mystical, even? What a pile of rubbish! But I do like <a href="https://www.youtube.com/watch?v=Y7JG63IuaWs">Lateralus</a> though&hellip;</p>
<p>Now some of you might say &ldquo;but something is still better than nothing&rdquo;. Well, I&rsquo;m in the nothing camp this time. It&rsquo;s better not to be in a marriage at all than to be in a really bad one.</p>
<p><strong>Avoidance of all forms of documentation</strong></p>
<p>A lot of people don&rsquo;t like writing documentation, and the most common excuse is that there&rsquo;s no time for it. But do you know what&rsquo;s great about documentation? You don&rsquo;t have to repeat yourself every now and then. New hires can get up to speed without much of your help. Also, a lot of WTFs could meet their &ldquo;ooooh that&rsquo;s why&rdquo; before someone expresses their wish to rewrite everything from scratch. And the company doesn&rsquo;t need to die with your departure either.</p>
<hr>
<p>Ok, I better stop before this post has turned completely from philosophy to <a href="https://www.youtube.com/watch?v=wBw14SVVQTI">free floating hostility</a>, and it&rsquo;s already way too long for most people. If you persisted up to this point, I&rsquo;d like to thank you and congratulate you on your patience.</p>
<p>With all being said, what&rsquo;s next? Well, until there are enough brave souls to speak up and change the status quo, me, and a lot of other people like me, will continue reporting on daily meetings what they did, what they&rsquo;ll do and if they have any blockers.</p>
<p>Maybe I&rsquo;ll apply this advice myself one day. Maybe you&rsquo;ll do it too, dear reader. But I don&rsquo;t expect this to ever become <em>a thing</em>. Why? Because it&rsquo;s common sense. There are no certificates for common sense. There are no expensive two-week education sessions for common sense. There&rsquo;s no branding value to exploit in common sense. So it&rsquo;s just us fighting with our frustrations. But:</p>
<blockquote>
<p>To hell with circumstances; I create opportunities.</p></blockquote>
<p>Thanks for reading!</p>
<p><em>All quotes in the text are by Bruce Lee.</em></p>
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/nzQWYHHqvIw?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"></iframe>
    </div>

]]></content:encoded>
    </item>
    
  </channel>
</rss>