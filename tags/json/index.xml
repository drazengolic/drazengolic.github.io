<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JSON on Drazen Golic</title>
    <link>https://www.drazengolic.com/tags/json/</link>
    <description>Recent content in JSON on Drazen Golic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>&amp;copy; Drazen Golic ([CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.en))</copyright>
    <lastBuildDate>Wed, 22 Nov 2023 11:22:23 +0200</lastBuildDate><atom:link href="https://www.drazengolic.com/tags/json/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build a JSON response directly in PostgreSQL</title>
      <link>https://www.drazengolic.com/blog/json-response-postgres/</link>
      <pubDate>Wed, 22 Nov 2023 11:22:23 +0200</pubDate>
      
      <guid>https://www.drazengolic.com/blog/json-response-postgres/</guid>
      <description>Introduction Anyone involved in web or back-end development had to create an API service at some point that outputs data from a database in a JSON format. A typical database-centric service does more or less 3 things:
Query the data Transform it to the required format Send it over the wire Looks simple, right? But there is a lot more going on just to deliver some data stored in the database.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Anyone involved in web or back-end development had to create an API service at some point that outputs data from a database in a JSON format. A typical database-centric service does more or less 3 things:</p>
<ol>
<li>Query the data</li>
<li>Transform it to the required format</li>
<li>Send it over the wire</li>
</ol>
<p>Looks simple, right? But there is a lot more going on just to deliver some data stored in the database.</p>
<h2 id="the-problem">The Problem</h2>
<h3 id="multiple-steps">Multiple steps</h3>
<p>Once you query the database, you need to deserialize it&rsquo;s result into some data structure or an object (or a set of objects) that you can later use to access or to manipulate the data. If there is a mismatch between the structure of the data and the structure of the response, you need to produce another set of objects from the first ones to create the response. Then you need to serialize them, this time in a JSON format, and then send the JSON string over the wire. That is <strong>one deserialization</strong>, <strong>one serialization</strong>, and <strong>several memory allocations</strong> in between.</p>
<p>If you happen to use a dynamically typed language, you could probably get away with manipulating some hash maps and/or arrays and call it a day. If you happen to use a statically typed language, you&rsquo;ll likely need types declared for both the data model and the response, and maybe even some transitional types.</p>
<h3 id="orms-and-query-builders">ORMs and query builders</h3>
<p>Things can get even more wasteful (not to mention slow) when using these tools, even if one uses them carefully. You may not care about that and enjoy your convenience, but here are some of the things that happen when querying data with them:</p>
<ol>
<li>In an ORM, a model corresponds to a database table and contains the same fields as the table. So every time you query with this model, you&rsquo;ll get <strong>all the fields</strong> from the table even if you don&rsquo;t need them. And in case there is a way to select only the fields you need, you&rsquo;ll end up with an inconsistent model to work with.</li>
<li>Related models are retrieved in two ways: either with <strong>joins</strong> or with <strong>separate queries</strong>.</li>
</ol>
<p>When using joins, number of records are <strong>multiplied</strong> with the number of records found in the joined table, containing the data from both. More joins, more multiplications. And if you happen to use <code>cross join</code>, you&rsquo;ll end up with a <a href="https://en.wikipedia.org/wiki/Cartesian_product">cartesian product</a> of records. Combine that with 1. and that&rsquo;s <strong>a lot</strong> of redundant data to be pulled into memory. It then iterates through the result set in order to produce objects as defined in the model. That means more processing and more memory allocation.</p>
<p>Using separate queries does not require as much memory or processing time, but it does require additional <strong>network hops</strong> to the database, waiting for it&rsquo;s result, and deserializing it into a usable structure.</p>
<h2 id="the-solution">The Solution</h2>
<p>What if I tell you that there is a way avoid all this cruft and tap the response directly from the data source? After all, database systems are not just storage, they are <strong>systems</strong> (the S in RDBMS), which means they are capable of doing much more than just to store and retrieve the data. And the one we&rsquo;re talking about here is a quite powerful one: PostgreSQL.</p>
<h3 id="postgresql-and-json">PostgreSQL and JSON</h3>
<p>PostgreSQL supports JSON as a <a href="https://www.postgresql.org/docs/current/datatype-json.html">data type</a> since version 9.4 released in 2014, allowing for more flexible storage needs. But it&rsquo;s not just storing and searching of JSON as is, there are plenty of <a href="https://www.postgresql.org/docs/current/functions-json.html">functions and operators</a> you can use to create, modify, assert or <a href="https://www.postgresql.org/docs/current/functions-aggregate.html">aggregate</a> JSON objects and arrays right in the SQL query. It does have some <a href="https://www.infoworld.com/article/3651356/jsonb-in-postgresql-today-and-tomorrow.html">limitations</a>, but it&rsquo;s quite useful nevertheless.</p>
<p>There are two types used for JSON: JSON and JSONB. The former is essentially a text that has to be parsed every time when operated on it, while the latter is a binary-optimized type that is faster to access and operate on, and a recommended type to store JSON.</p>
<h3 id="an-example">An example</h3>
<p>For an example I&rsquo;ll use a relation similar to the one I&rsquo;ve encountered recently: let&rsquo;s imagine we have two tables called <code>folder</code> and <code>document</code> in a relation 1:n, where every document belongs to some folder. A single folder has different settings stored as a JSON object, and an array of named web links also stored as JSON. A document contains some key-value properties that is, as you can imagine, also stored as JSON.</p>
<p>An API service to get details of a single folder needs to return all available columns, only a subset of it&rsquo;s settings, and also all of it&rsquo;s documents as an array under <code>documents</code> key.</p>
<figure><img src="/images/folder-document-schema.png"
         alt="An example schema"/><figcaption>
            <p>An example schema</p>
        </figcaption>
</figure>

<p>Folder settings look like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;qr_size&#34;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;qr_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#4d00a7&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;folder_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#4d00a7&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;show_label&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;qr_bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#ffffff&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;alert_on_visit&#34;</span><span class="p">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>Folder external links look like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;4cb41be0-ad12-4161-83cb-02c159801be8&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;link&#34;</span><span class="p">:</span> <span class="s2">&#34;https://www.google.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;web&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;Google&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// maybe more links
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">]</span></span></span></code></pre></div><p>Document details look like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;b6f9fe23-d4d6-4a61-b01a-934f3dd61a5e&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mask&#34;</span><span class="p">:</span> <span class="s2">&#34;abc***xyz&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;field name&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;field value&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// maybe more details
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">]</span></span></span></code></pre></div><p>Note how the elements of an array have a generated <code>id</code> field, so that the UI app could manage the elements properly, but it should not be included in the response. Also note the <code>mask</code> field in the document details, which will be addressed later.</p>
<h3 id="writing-the-query">Writing the query</h3>
<p>Let&rsquo;s write the query without including the documents first:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">json_build_object</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;settings&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="s1">&#39;folder_color&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;folder_color&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;external_links&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">json_agg</span><span class="p">(</span><span class="n">el</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">external_links</span><span class="p">)</span><span class="w"> </span><span class="n">el</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">folder</span><span class="w"> </span><span class="n">f</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span></span></span></code></pre></div><p>Used functions and operators explained:</p>
<ul>
<li><code>json_build_object</code> is, obviously, a function to build JSON object by giving it an even number of variadic arguments, alternating key and the value</li>
<li><code>-&gt;</code> is an operator to extract a field from a JSON object as is, whereas <code>-&gt;&gt;</code> extracts value as text</li>
<li><code>jsonb_array_elements</code> expands a top-level JSON array (stored as JSONB, note the prefix jsonb_) into a <em>set</em> of JSON values, so that set operations like <code>select</code> can be used</li>
<li><code>-</code> is an operator that removes a key (and it&rsquo;s value) from the JSON object</li>
<li><code>json_agg</code> is an aggregate function that collects the input values (including NULL) into a JSON array, converting values to JSON</li>
</ul>
<p>Now that we understand the basic building blocks, let&rsquo;s add the documents as well:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">json_build_object</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;settings&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="s1">&#39;folder_color&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;folder_color&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;external_links&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">json_agg</span><span class="p">(</span><span class="n">el</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">external_links</span><span class="p">)</span><span class="w"> </span><span class="n">el</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;documents&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">with</span><span class="w"> </span><span class="n">doc</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">select</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">title</span><span class="p">,</span><span class="w"> </span><span class="k">type</span><span class="p">,</span><span class="w"> </span><span class="n">details</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">document</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">where</span><span class="w"> </span><span class="n">folder_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="k">desc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">json_agg</span><span class="p">(</span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">doc</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w">   
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">doc</span><span class="p">.</span><span class="n">title</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s1">&#39;type&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">doc</span><span class="p">.</span><span class="k">type</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s1">&#39;details&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">json_agg</span><span class="p">(</span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="s1">&#39;value&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;value&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">))</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">doc</span><span class="p">.</span><span class="n">details</span><span class="p">)</span><span class="w"> </span><span class="n">dd</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">from</span><span class="w"> </span><span class="n">doc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">folder</span><span class="w"> </span><span class="n">f</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span></span></span></code></pre></div><p>Here we are using a CTE to fetch and sort the documents in a required order, and then build the JSON array with the aggregate function.</p>
<p>Now that we have the query, what&rsquo;s left is to make a web request handler that will execute it and pipe its response as a HTTP response.</p>
<p>If you are using Go for example, an HTTP handler could look like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">folderGetHandler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// fetch the db connection, query, and the folder id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="nx">row</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">folderId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">s</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">row</span><span class="p">.</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">s</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">server</span><span class="p">.</span><span class="nf">NotFoundResponse</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">w</span><span class="p">.</span><span class="nf">Header</span><span class="p">().</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;content-type&#34;</span><span class="p">,</span> <span class="s">&#34;application/json&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div><h3 id="summary">Summary</h3>
<p>Now compare the code above with what is usually required to make such a service. With a somewhat larger SQL query we avoid:</p>
<ol>
<li>Serialization and deserialization of data into objects and back. Only the response text needs to be decoded.</li>
<li>Joins with related tables</li>
<li>Additional calls to the database</li>
<li>Redundant data delivered over the network, or processed anywhere within the app</li>
<li>Additional types declared</li>
<li>Having to edit on multiple places to change the response structure</li>
</ol>
<p>And with proper <a href="https://www.drazengolic.com/blog/text-search-postgres/">indexing</a> of tables, the response time will be <em>noticeably shorter</em>.</p>
<h2 id="some-challenges">Some challenges</h2>
<p>As you may have expected, cutting through all these layers of abstraction does introduce some additional challenges when it comes to making the design decision. Below are some of them.</p>
<h3 id="data-outside-the-database">Data outside the database</h3>
<p>Perhaps not all of the data you need to return is stored in the database. Some of it can live i.e. in the user session, or some shared resource.</p>
<p>If the amount of such data is small, it can be made as a part of the query, and have the database return it back as a part of the response. Larger samples could require some string building and concatenation, which isn&rsquo;t exactly a favorable thing. But if a significant portion of response data is not in the database, then this approach isn&rsquo;t suitable and could become a source of trouble more than it&rsquo;d be beneficial.</p>
<h3 id="custom-transformations">Custom transformations</h3>
<p>Remember the <code>mask</code> field in the document details that I&rsquo;ve mentioned to take note in the example above? The requirement that wasn&rsquo;t addressed in the example was to mask the value by one of the predefined patterns, which is the value of the mask field. So, should we just drop all of this and go the usual way just for one small transformation? Not necessarily. The transformation is a simple function without side effects (pure), and could be easily written as a PL/pgSQL <a href="https://www.postgresql.org/docs/current/sql-createfunction.html">function</a>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PL/pgSQL" data-lang="PL/pgSQL"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">or</span><span class="w"> </span><span class="k">replace</span><span class="w"> </span><span class="k">function</span><span class="w"> </span><span class="n">mask_detail</span><span class="p">(</span><span class="n">mask</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w"> </span><span class="n">v</span><span class="w"> </span><span class="nb">text</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">returns</span><span class="w"> </span><span class="nb">text</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">language</span><span class="w"> </span><span class="n">plpgsql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">immutable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">parallel</span><span class="w"> </span><span class="n">safe</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">returns</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">input</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">as</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$$</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">declare</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">output</span><span class="w"> </span><span class="nb">text</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="nb">int</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">begin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">trim</span><span class="p">(</span><span class="n">v</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">length</span><span class="p">(</span><span class="n">output</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="k">case</span><span class="w"> </span><span class="n">mask</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="c1">-- mask middle text
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w"> </span><span class="k">when</span><span class="w"> </span><span class="s1">&#39;abc***xyz&#39;</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">case</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">when</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mf">6</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">3</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;***&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mf">2</span><span class="p">,</span><span class="w"> </span><span class="mf">3</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">when</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">6</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;***&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">when</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mf">1</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;***&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="n">len</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">when</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">0</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;***&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">end</span><span class="w"> </span><span class="k">case</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="c1">-- other cases omitted for clarity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w"> </span><span class="k">else</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="n">output</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="k">end</span><span class="w"> </span><span class="k">case</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">output</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">end</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$$</span></span></span></code></pre></div><p>Now the document detail subquery could look like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">json_agg</span><span class="p">(</span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s1">&#39;value&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">mask_detail</span><span class="p">(</span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;mask&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;value&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">))</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">details</span><span class="p">)</span><span class="w"> </span><span class="n">dd</span></span></span></code></pre></div><p>All of this means that you might need to offload some data specific code to the database layer too, not just the creation of the response. If you don&rsquo;t like the idea of code spreading to the database (that you manage through a migration system just like the tables), then this approach will hardly resonate with you.</p>
<p>On the other hand, it&rsquo;s not uncommon to have an application consisted of multiple services doing different things, so you could think of PostgreSQL as another <strong>service</strong> you communicate with through an RPC API that parses SQL instead of protobuf or JSON.</p>
<h3 id="dynamic-queries">Dynamic queries</h3>
<p>A reasonable question at this point is: <em>How do I make the queries dynamically? Don&rsquo;t tell me I need to concat SQL strings like in the early days of PHP?</em></p>
<p>Building queries with string concatenation is bad indeed - it hurts readability and it&rsquo;s prone to errors. With ORMs out the window, what really is there for us? And since the queries we&rsquo;ll be writing are a bit longer than usual, the solution I&rsquo;m going to propose is the same one that people created in order not to concatenate strings to produce HTML: <strong>a template language</strong>.</p>
<p>It could be any established template language that has the following properties:</p>
<ol>
<li>It has a syntax that is easy to spot in the text. The ones based on using braces will probably fit.</li>
<li>It is fast to parse, or it has a caching mechanism so that parsed templates could be reused multiple times.</li>
</ol>
<p>I tried this with Go&rsquo;s <a href="https://pkg.go.dev/text/template">text/template</a> and embedding the files with <a href="https://pkg.go.dev/embed">embed</a> directives, and so far I don&rsquo;t hate it (but could use a better editor support though). Note that you don&rsquo;t need Go for this, you could try something similar with <a href="https://twig.symfony.com/">Twig</a>, <a href="https://shopify.github.io/liquid/">Liquid</a>, <a href="http://mustache.github.io/">Mustache</a> or basically any other template language you see fit.</p>
<p>To see how it looks, have a peek at this example, where the user data linked to the folder is optional:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">json_build_object</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;settings&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="s1">&#39;folder_color&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;folder_color&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">{{</span><span class="k">if</span><span class="w"> </span><span class="p">.</span><span class="n">ShowUser</span><span class="err">}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;user_name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;user_profile&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="n">profile</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">{{</span><span class="k">end</span><span class="err">}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;external_links&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">json_agg</span><span class="p">(</span><span class="n">el</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">external_links</span><span class="p">)</span><span class="w"> </span><span class="n">el</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">from</span><span class="w"> </span><span class="n">folder</span><span class="w"> </span><span class="n">f</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">{{</span><span class="k">if</span><span class="w"> </span><span class="p">.</span><span class="n">ShowUser</span><span class="err">}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">inner</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="k">public</span><span class="p">.</span><span class="k">user</span><span class="w"> </span><span class="n">u</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">user_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">{{</span><span class="k">end</span><span class="err">}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span></span></span></code></pre></div><p>Not ideal, but arguably better than concatenation. And you have all the power of SQL at your fingertips.</p>
<h2 id="conclusion">Conclusion</h2>
<p>By presenting this idea, I hope I&rsquo;ve nudged you further into exploration of what your tools at hand can do to make things simpler and faster. It&rsquo;s easy to stick to the &ldquo;lowest common denominator&rdquo; design, a &ldquo;we&rsquo;ve always done it this way&rdquo; mindset, and, figuratively speaking, dispose many useful things to the attic to collect dust just because you&rsquo;re not sure if you should use them. And as a true engineer, always do the cost-benefit analysis of every idea in the given context.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>