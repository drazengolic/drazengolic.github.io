<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Дражен Голић</title>
    <link>https://www.drazengolic.com/sr/</link>
    <description>Recent content on Дражен Голић</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>sr-BA</language>
    <copyright>&amp;copy; Drazen Golic ([CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.en))</copyright>
    <lastBuildDate>Tue, 28 Nov 2023 11:30:23 +0200</lastBuildDate><atom:link href="https://www.drazengolic.com/sr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Projects</title>
      <link>https://www.drazengolic.com/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.drazengolic.com/projects/</guid>
      <description>Projects Active ▷ My Number Game A simple web game that is similar in spirit to Countdown Numbers, but modeled after one of the games in the popular TV show Slagalica on Radio Television of Serbia. The game makes heavy use of the kombinat library, compiled to WASM via TinyGo.
English Serbian
▷ Kombinat Generic combinatorial functions and generators for producing combinations, permutations, multiset permutations and variations from elements in a slice of any type in Go language.</description>
      <content:encoded><![CDATA[<h1 id="projects">Projects</h1>
<h2 id="active">Active</h2>
<h3 id="-my-number-game">▷ My Number Game</h3>
<p>A simple web game that is similar in spirit to Countdown Numbers, but modeled after one of the games in the popular TV show <em>Slagalica</em> on Radio Television of Serbia. The game makes heavy use of the <strong>kombinat</strong> library, compiled to WASM via TinyGo.</p>
<p><a href="https://mynumber.drazengolic.com">English</a> <a href="https://mojbroj.drazengolic.com">Serbian</a></p>
<h3 id="-kombinat">▷ Kombinat</h3>
<p>Generic combinatorial functions and generators for producing combinations, permutations, multiset permutations and variations from elements in a slice of any type in Go language.</p>
<p><a href="https://github.com/drazengolic/kombinat">GitHub</a> <a href="https://pkg.go.dev/github.com/drazengolic/kombinat">Pkg Reference</a></p>
<h2 id="previous-work">Previous work</h2>
<p>Some notable projects I&rsquo;ve done over the years completely by myself (or with very little assistance).</p>
<h3 id="-qr4doc-2022---2023">▷ QR4DOC (2022 - 2023)</h3>
<p>A short-lived SaaS developed for validation, supplemental information, and notification on change for printed documents, originally intended for insurance policies. <a href="https://www.drazengolic.com/qr4doc/">View project details</a></p>
<blockquote>
<p><strong>Note:</strong> this project is in search for funding, or it&rsquo;s source code is for sale. If you are interested in pushing this project forward, please do reach out to me.</p>
</blockquote>
<h3 id="-salesforce-based-payment-processing-application-2019---2020">▷ Salesforce-based payment processing application (2019 - 2020)</h3>
<p>An application that enabled Salesforce users to take order payments from customers on-site or online, by utilizing <a href="https://www.adyen.com/">Adyen</a> payment platform&rsquo;s <a href="https://docs.adyen.com/point-of-sale/design-your-integration/choose-your-architecture/cloud/">cloud-enabled</a> POS terminals and other forms of payment, such as online payments (supported 3-D Secure 1 &amp; 2), Apple Pay, and telephone orders. A record of a successful transaction was saved to Salesforce as a part of the paid order, with an option to issue a refund by this same app. POS payment section has displayed messages from the payment terminals in real-time.</p>
<p>More than 90% of payment transactions to the company were processed by this application for a period of at least two years, with several millions of EUR worth in total.</p>
<p>Tech stack: .NET Core, SignalR, Redis, Bash, Ubuntu. Some clients for the app&rsquo;s API-s were done in PHP.</p>
<p><em>Company: Famille Carabello-Baum SAS (Château de Pommard) / Vivant Inc</em></p>
<div style="column-count: 3;">
  <a href="/images/payapp/1.jpg"><img alt="Choose payment method" src="/images/payapp/1.jpg"></a>
<a href="/images/payapp/2.jpg"><img alt="Chose POS terminal" src="/images/payapp/2.jpg"></a>
<a href="/images/payapp/3.jpg"><img alt="POS screen" src="/images/payapp/3.jpg"></a>
</div>


<h3 id="-plugins-for-e-commerce-systems-2016---2017">▷ Plugins for e-commerce systems (2016 - 2017)</h3>
<p>Plugins for monitoring shopping cart contents and product views for: Woocommerce, Shopify, Magento 1 &amp; 2</p>
<p><em>Company: Ematic Solutions Pte. Ltd., Singapore</em></p>
<h3 id="-opengl-widget-for-react-native-on-ios-2016">▷ OpenGL widget for React Native on iOS (2016)</h3>
<p>Developed an animated, gesture based three-dimensional rating widget as a React Native plugin in Objective-C by using plain OpenGL API. <a href="https://youtu.be/43CTs8OLhBI?t=143">Youtube Video</a></p>
<p><em>Company: Oroundo Mobile GmbH, Austria</em></p>
<h3 id="-scan-packer-2015---2016">▷ Scan Packer (2015 - 2016)</h3>
<p>A desktop app (Java SE) and later a web app (HTML5 + PHP) for uploading large quantities of project images (scans) and organizing them into a structure suitable for the automated workflow system that was in place.</p>
<p><em>Company: DOOB 3D Labs d.o.o. Banja Luka</em></p>
<h3 id="-mobile-games-2013---2014">▷ Mobile games (2013 - 2014)</h3>
<p>A couple of mobile games for Android that I did for fun by using Java and <a href="https://libgdx.com/">libGDX</a> under the pseudonim &ldquo;fontelee&rdquo;. Unfortunately, they&rsquo;re not available on the Play Store any more, since they&rsquo;re using old Google+ APIs and I&rsquo;ve lost important files required to update the games.</p>
<p><a href="/images/penguin_hop.png"><figure><img src="/images/penguin_hop.png"
    alt="Penguin Hop" width="50%"><figcaption>
      <p>Penguin Hop</p>
    </figcaption>
</figure>
</a>
<a href="/images/simon_swipes.png"><figure><img src="/images/simon_swipes.png"
    alt="Simon Swipes" width="50%"><figcaption>
      <p>Simon Swipes</p>
    </figcaption>
</figure>
</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Пројекти</title>
      <link>https://www.drazengolic.com/sr/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.drazengolic.com/sr/projects/</guid>
      <description>Пројекти Активни ▷ Игра Мој Број Онлајн игра моделована по игри из популарне ТВ Слагалице са Радио Телевизије Србије. Игра интензивно користи kombinat библиотеку и компајлирана је у WASM помоћу TinyGo компајлера.
Српски Енглески
▷ Kombinat Генеричке комбинаторне функције и генератори за генерисање комбинација, пермутација са и без понављања, као и варијација са понављањем од елемената из слајсова било којег типа у Го језику.
GitHub Pkg Reference
Претходни радови Неки важнији пројекти које сам протеклих година реализовао самостално, или са врло мало помоћи.</description>
      <content:encoded><![CDATA[<h1 id="пројекти">Пројекти</h1>
<h2 id="активни">Активни</h2>
<h3 id="-игра-мој-број">▷ Игра Мој Број</h3>
<p>Онлајн игра моделована по игри из популарне ТВ Слагалице са Радио Телевизије Србије. Игра интензивно користи <strong>kombinat</strong> библиотеку и компајлирана је у WASM помоћу TinyGo компајлера.</p>
<p><a href="https://mojbroj.drazengolic.com">Српски</a> <a href="https://mynumber.drazengolic.com">Енглески</a></p>
<h3 id="-kombinat">▷ Kombinat</h3>
<p>Генеричке комбинаторне функције и генератори за генерисање комбинација, пермутација са и без понављања, као и варијација са понављањем од елемената из слајсова било којег типа у Го језику.</p>
<p><a href="https://github.com/drazengolic/kombinat">GitHub</a> <a href="https://pkg.go.dev/github.com/drazengolic/kombinat">Pkg Reference</a></p>
<h2 id="претходни-радови">Претходни радови</h2>
<p>Неки важнији пројекти које сам протеклих година реализовао самостално, или са врло мало помоћи.</p>
<h3 id="-qr4doc-2022---2023">▷ QR4DOC (2022 - 2023)</h3>
<p>Кратко постојећи SaaS производ развијен за валидацију, допунске информације, као и нотификације о озмјенама за штампане документе, оригинално намијењен за полисе осигурања. <a href="https://www.drazengolic.com/sr/qr4doc/">Види детаље пројекта</a></p>
<blockquote>
<p><strong>Напомена:</strong> у потрази сам за даљим финансирањем развоја овог пројекта, а могуће је и откупити постојећи изворни код. Уколико има неко заинтересован да гура пројекат даље, молио бих да ме контактира.</p>
</blockquote>
<h3 id="-апликација-за-наплату-интегрисана-са-salesforce-системом-2019---2020">▷ Апликација за наплату интегрисана са Salesforce системом (2019 - 2020)</h3>
<p>Апликација која омогућује корисницима Salesforce система да наплаћују наруџбе на лицу мјеста или путем интернета, користећи <a href="https://www.adyen.com/">Adyen</a> систем за плаћање и њихове ПОС терминале <a href="https://docs.adyen.com/point-of-sale/design-your-integration/choose-your-architecture/cloud/">у облаку</a>, као и друге видове плаћања, попут онлајн плаћања (подржани 3-D Secure 1 и 2), Apple Pay, или телефонских наруџби. Запис о успјешној трансакцији се сачувао као дио наруџбе која је плаћена, а коју је било могуће и рефундирати помоћу ове исте апликације. Сегмент за ПОС плаћање је приказивао поруке са ПОС терминала у реалном времену.</p>
<p>Више од 90% платног промета компаније је ишло преко ове апликације у периоду од најмање двије године, са укупном вриједношћу од неколико милиона евра.</p>
<p>Технологије: .NET Core, SignalR, Redis, Bash, Ubuntu. Неке апликације писане као клијент API-ја ове апликације су писане у PHP-у.</p>
<p><em>Компанија: Famille Carabello-Baum SAS (Château de Pommard) / Vivant Inc</em></p>
<div style="column-count: 3;">
  <a href="/images/payapp/1.jpg"><img alt="Choose payment method" src="/images/payapp/1.jpg"></a>
<a href="/images/payapp/2.jpg"><img alt="Chose POS terminal" src="/images/payapp/2.jpg"></a>
<a href="/images/payapp/3.jpg"><img alt="POS screen" src="/images/payapp/3.jpg"></a>
</div>


<h3 id="-додаци-за-e-commerce-системе-2016---2017">▷ Додаци за e-commerce системе (2016 - 2017)</h3>
<p>Додаци (plugins) за праћење садржаја корпе за куповину и прегледања производа за платформе: Woocommerce, Shopify, Magento 1 &amp; 2</p>
<p><em>Компанија: Ematic Solutions Pte. Ltd., Singapore</em></p>
<h3 id="-opengl-виџет-за-react-native-на-ios-у-2016">▷ OpenGL виџет за React Native на iOS-у (2016)</h3>
<p>Анимирани виџет за оцјењивање у три димензије путем гестуре прстом, развијен као додатак за React Native, писан у Objective-C помоћу нативног OpenGL API-а. <a href="https://youtu.be/43CTs8OLhBI?t=143">Youtube видео</a></p>
<p><em>Компанија: Oroundo Mobile GmbH, Austria</em></p>
<h3 id="-пакер-скенова-2015---2016">▷ Пакер Скенова (2015 - 2016)</h3>
<p>Десктоп апликација (Java SE) а касније и веб апликација (HTML5 + PHP) за отпремање великих количина слика (скенова) и њихово организовање у структуру погодну за систем за аутоматизовање радног процеса који је тада кориштен.</p>
<p><em>Компанија: DOOB 3D Labs d.o.o. Banja Luka</em></p>
<h3 id="-игрице-за-мобилни-телефон-2013---2014">▷ Игрице за мобилни телефон (2013 - 2014)</h3>
<p>Пар игрица за Android које сам направио из разоноде, користећи језик Java и <a href="https://libgdx.com/">libGDX</a> под псеудонимом &ldquo;fontelee&rdquo;. Нажалост, нису више доступне на Play Store-у, јер користе стари Google+ API, а загубио сам важне датотеке потребне да се игрице ажурирају.</p>
<p><a href="/images/penguin_hop.png"><figure><img src="/images/penguin_hop.png"
    alt="Penguin Hop" width="50%"><figcaption>
      <p>Penguin Hop</p>
    </figcaption>
</figure>
</a>
<a href="/images/simon_swipes.png"><figure><img src="/images/simon_swipes.png"
    alt="Simon Swipes" width="50%"><figcaption>
      <p>Simon Swipes</p>
    </figcaption>
</figure>
</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hire me</title>
      <link>https://www.drazengolic.com/hire-me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.drazengolic.com/hire-me/</guid>
      <description>Hire me I can offer consulting services in the following areas: software development, solution design, business process automation, software product engineering &amp;amp; management.
A non-exhaustive list of technologies I can use to deliver working solutions:
Programming languages: PHP, Go, Elixir, C#, Java, JavaScript Databases: PostgreSQL, MySQL, Redis Frameworks and cloud services: any (I read documentation!) Cutting the operating costs and addressing performance bottlenecks are the tasks that I enjoy the most.</description>
      <content:encoded><![CDATA[<h1 id="hire-me">Hire me</h1>
<p>I can offer consulting services in the following areas: software development, solution design, business process automation, software product engineering &amp; management.</p>
<p>A non-exhaustive list of technologies I can use to deliver working solutions:</p>
<ul>
<li>Programming languages: PHP, Go, Elixir, C#, Java, JavaScript</li>
<li>Databases: PostgreSQL, MySQL, Redis</li>
<li>Frameworks and cloud services: any (I read documentation!)</li>
</ul>
<p>Cutting the operating costs and addressing performance bottlenecks are the tasks that I enjoy the most.</p>
<p>With my personal network of skilled professionals, it is also possible to arrange a complete <strong>greenfield</strong> or <strong>brownfield</strong> project development by covering the following areas: service development, web development, mobile application development, Salesforce development, UI/UX design, product management.</p>
<h2 id="contact">Contact</h2>
<p>To contact me, please fill out the form below.</p>

<form id="fs-frm" name="contact-form" accept-charset="utf-8" action="https://formspree.io/f/mjvqqlgy" method="post">
    <input type="text" name="name" id="full-name" placeholder="Full Name" required="">
    <input type="text" name="company" id="company" placeholder="Company" required="">
    <input type="email" name="_replyto" id="email-address" placeholder="E-mail Address" required="">
    <textarea rows="5" name="message" id="message" placeholder="Enter your message..." required=""></textarea>
    <input type="hidden" name="_subject" id="email-subject" value="Contact Form Submission">
    <input type="hidden" name="lang" id="lang" value="en">
  <input type="submit" value="Submit">
</form>
<script>
    (function() {
      var form = document.getElementById("fs-frm");     
      async function handleSubmit(event) {
        event.preventDefault();
        var data = new FormData(event.target);
        fetch(event.target.action, {
          method: form.method,
          body: data,
          headers: {
              'Accept': 'application/json'
          }
        }).then(response => {
          if (response.ok) {
            alert("Thanks for your contacting me! You can expect a reply within 24 hours.");
            form.reset()
          } else {
            response.json().then(data => {
              if (Object.hasOwn(data, 'errors')) {
                alert(data["errors"].map(error => error["message"]).join(", "))
              } else {
                alert("Oops! There was a problem submitting your form")
              }
            })
          }
        }).catch(error => {
          alert("Oops! There was a problem submitting your form")
        });
      }
      form.addEventListener("submit", handleSubmit)})();
</script>

<p>Or, if you&rsquo;d rather email me directly, running the following snippet in a <em>macOS</em> or a <em>GNU/Linux</em> terminal will reveal my e-mail address:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="sb">`</span><span class="nb">echo</span> <span class="s2">&#34;ZHJhemVuQGZhc3R&#34;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $1&#34;tYWlsLmNvbQ==&#34;}&#39;</span> <span class="p">|</span> base64 --decode<span class="sb">`</span></span></span></code></pre></div><p>Please allow up to 24h for me to get back to you.</p>
<h2 id="business-details">Business details</h2>
<p><strong>Business name:</strong> &ldquo;EPRUBIT&rdquo; Dražen Golić s.p. Banja Luka<br>
<strong>Address:</strong> Bulevar vojovode Stepe Stepanovića 165, Banja Luka, Republic of Srpska, Bosnia and Herzegovina<br>
<strong>JIB:</strong> 4512081610008</p>
<p><a href="http://bizreg.esrpska.com/Home/PregledPreduzetnika/236550">BizReg entry</a> (government web portal)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Ангажуј ме</title>
      <link>https://www.drazengolic.com/sr/hire-me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.drazengolic.com/sr/hire-me/</guid>
      <description>Ангажуј ме Могу да понудим консултантске услуге из сљедећих области: развој софтвера, дизајн рјешења, аутоматизација пословних процеса, инжињеринг и менаџмент софтверских производа.
Непотпуна листа технологија у којима могу да доставим функционална рјешења:
Програмски језици: PHP, Go, Elixir, C#, Java, JavaScript Базе података: PostgreSQL, MySQL, Redis ”Фрејмворци” и сервиси у ”облаку”: било који (јер читам документацију) Смањење оперативних трошкова, као и оптимизација перформанси система су задаци који ми придају највише задовољства.</description>
      <content:encoded><![CDATA[<h1 id="ангажуј-ме">Ангажуј ме</h1>
<p>Могу да понудим консултантске услуге из сљедећих области: развој софтвера, дизајн рјешења, аутоматизација пословних процеса, инжињеринг и менаџмент софтверских производа.</p>
<p>Непотпуна листа технологија у којима могу да доставим функционална рјешења:</p>
<ul>
<li>Програмски језици: PHP, Go, Elixir, C#, Java, JavaScript</li>
<li>Базе података: PostgreSQL, MySQL, Redis</li>
<li>”Фрејмворци” и сервиси у ”облаку”: било који (јер читам документацију)</li>
</ul>
<p>Смањење оперативних трошкова, као и оптимизација перформанси система су задаци који ми придају највише задовољства.</p>
<p>Са мојом личном мрежом искусних професионалаца, такође је могуће је договорити развој <strong>нових</strong> или <strong>постојећих</strong> пројеката у потпуности, покривајући сљедеће области: развој сервиса, веб развој, развој мобилних апликација, Salesforce развој, UI/UX дизајн, управљање развојем производа.</p>
<h2 id="контакт">Контакт</h2>
<p>Да бисте ме контактирали, попуните форму испод.</p>

<form id="fs-frm" name="contact-form" accept-charset="utf-8" action="https://formspree.io/f/mjvqqlgy" method="post">
    <input type="text" name="name" id="full-name" placeholder="Пуно име" required="">
    <input type="text" name="company" id="company" placeholder="Компанија" required="">
    <input type="email" name="_replyto" id="email-address" placeholder="E-mail адреса" required="">
    <textarea rows="5" name="message" id="message" placeholder="Унеси поруку..." required=""></textarea>
    <input type="hidden" name="_subject" id="email-subject" value="Contact Form Submission">
    <input type="hidden" name="lang" id="lang" value="sr">
  <input type="submit" value="Пошаљи">
</form>
<script>
    (function() {
      var form = document.getElementById("fs-frm");     
      async function handleSubmit(event) {
        event.preventDefault();
        var data = new FormData(event.target);
        fetch(event.target.action, {
          method: form.method,
          body: data,
          headers: {
              'Accept': 'application/json'
          }
        }).then(response => {
          if (response.ok) {
            alert("Хвала што сте ме контактирали! Одговор очекујте у року од 24 часа.");
            form.reset()
          } else {
            response.json().then(data => {
              if (Object.hasOwn(data, 'errors')) {
                alert(data["errors"].map(error => error["message"]).join(", "))
              } else {
                alert("Грешка у слању поруке.")
              }
            })
          }
        }).catch(error => {
          alert("Грешка у слању поруке.")
        });
      }
      form.addEventListener("submit", handleSubmit)})();
</script>

<p>Или ако пак желите да ми пошаљете мејл директно, извршавање кода испод у <em>macOS</em> или <em>GNU/Linux</em> терминалу ће да прикаже моју адресу:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="sb">`</span><span class="nb">echo</span> <span class="s2">&#34;ZHJhemVuQGZhc3R&#34;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $1&#34;tYWlsLmNvbQ==&#34;}&#39;</span> <span class="p">|</span> base64 --decode<span class="sb">`</span></span></span></code></pre></div><p>Молим дозволите до 24 часа за одговор.</p>
<h2 id="пословне-информације">Пословне информације</h2>
<p><strong>Пословно име:</strong> &ldquo;EPRUBIT&rdquo; Dražen Golić s.p. Banja Luka<br>
<strong>Адреса:</strong> Булевар војводе Степе Степановића 165, Бања Лука, Република Српска, Босна и Херцеговина<br>
<strong>JIB:</strong> 4512081610008</p>
<p><a href="http://bizreg.esrpska.com/Home/PregledPreduzetnika/236550">BizReg</a> (државни веб портал)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Roll your own methodology</title>
      <link>https://www.drazengolic.com/blog/roll-your-own-methodology/</link>
      <pubDate>Thu, 01 Aug 2024 23:04:16 +0200</pubDate>
      
      <guid>https://www.drazengolic.com/blog/roll-your-own-methodology/</guid>
      <description>I am not teaching you anything. I just help you to explore yourself.
&amp;ndash; Bruce Lee
Now what would be a better way to start a post than to quote a childhood hero who was a martial artist, an actor, but also a philosopher - Bruce Lee! (The old movies were common on TV while I was growing up)
This is a continuation of my satirical post TDD - The Toilet-driven development, albeit in a less satirical manner.</description>
      <content:encoded><![CDATA[<blockquote>
<p>I am not teaching you anything. I just help you to explore yourself.</p>
<p>&ndash; Bruce Lee</p>
</blockquote>
<p>Now what would be a better way to start a post than to quote a childhood hero who was a martial artist, an actor, but also a philosopher - Bruce Lee! (The old movies were common on TV while I was growing up)</p>
<p>This is a continuation of my satirical post <a href="https://www.drazengolic.com/blog/tdd/">TDD - The Toilet-driven development</a>, albeit in a less satirical manner.</p>
<p>I&rsquo;ve mentioned in the post how there is no right methodology to build software (especially those under the <em>Agile</em> umbrella), because they&rsquo;re being sold context-free. It&rsquo;s the context that decides whether you&rsquo;ll have success with a certain practice, but no one really knows the exact context under which a certain methodology was born (or if it&rsquo;s simply someone&rsquo;s thoughts on what <em>should</em> work).</p>
<p>Building software is a lot like a martial art. The more you practice it, the more you get better at it. That&rsquo;s right, <em>practicing</em>. Not watching some youtubers, hanging out on streams, meetups, or even reading some stupid blogs like this one. Building stuff, even if it&rsquo;s something really stupid or completely useless.</p>
<blockquote>
<p>Practice makes perfect. After a long time of practicing, our work will become natural, skillfull, swift, and steady.</p>
</blockquote>
<p>The term <em>martial art</em> has it&rsquo;s roots in Latin, meaning &ldquo;arts of Mars&rdquo;. And we know that Mars was a Roman god of war. Coincidentally, Erik Meijer famously <a href="https://youtu.be/2u0sNRO-QKQ">compared</a> writing software with fighting a war. And it is a fight with almost everything - fighting the language constructs, the legacy codes, design patterns out of place, web frameworks that are trying hard to be the lid for every pot, hard deadlines, &ldquo;quick changes&rdquo;, acute insufficiency of important details written down, emergency bugs, people&rsquo;s opinions, your own motivation&hellip; the list goes on. It can be quite frustrating, but it&rsquo;s the frustration that helps you learn what works and what doesn&rsquo;t in a given situation. That&rsquo;s context.</p>
<blockquote>
<p>Without frustration you will not discover that you might be able to do something on your own. We grow through conflict.</p>
</blockquote>
<p>The waterfall software methodology was perceived as too rigid, and the Agile movement was born as something that was supposed to be better at &ldquo;responding to change&rdquo;. But what did we get? A set of recipes consisted of questionable practices, from coding to management, that somehow should transform an organisation into a software production powerhouse. And if you fail while doing it, you &ldquo;didn&rsquo;t do it properly&rdquo;, or you have &ldquo;skill issues&rdquo;. And if you change something to accomodate to your use case, then that&rsquo;s &ldquo;not the real method X&rdquo;. What is it, then? I should remind you that there are numerous books on Scrum, which was originally a 15-page pamphlet!</p>
<p>And what do I suggest instead?</p>
<blockquote>
<p>Absorb what is useful, discard what is not, add what is uniquely your own.</p>
</blockquote>
<p>Rinse, repeat, and do not fear of failure.</p>
<p>There are only three important things about any piece of software:</p>
<ol>
<li>It does what it&rsquo;s supposed to do, as good as possible</li>
<li>It doesn&rsquo;t break the budget</li>
<li>Is delivered in a reasonable time frame</li>
</ol>
<p>How will you get there is not really that important, as long as you care enough to actually get there. And as I suggested many times, there is no recipe that could be followed mindlessly while expecting a successful outcome every time. It takes something that everyone desperately tries to avoid - a bit of effort.</p>
<blockquote>
<p>Only the self-sufficient stand alone - most people follow the crowd and imitate.</p>
</blockquote>
<p>The idea to roll your own methodology probably sounds intimidating. It could raise questions like: Where do I start? Do I have room for errors, enough time to try out things? If you&rsquo;ve experienced enough frustration with the existing stuff, you&rsquo;ll probably have an idea or two what to do differently. While I can&rsquo;t give any specific instructions, I could point out some things that frustrate <em>me in particular</em>, and maybe you&rsquo;ll be able to pick up a couple of things from there.</p>
<p>Here are some of the things I find frustrating with the existing methodologies, in no particular order:</p>
<p><strong>Form without substance</strong></p>
<p>This is something that frustrates me in general, not just in software development.</p>
<p>For example - daily meetings. Why organize meetings every day, where no one is listening to anyone, just to satisfy some prescribed form? The first thing I&rsquo;d stop doing are the meetings for the sake of meetings, or any other activity being done just because it&rsquo;s &ldquo;by the book&rdquo;. This is especially infuriating in remote teams with the big time zone difference, when you have to stay at work late in the afternoon just to satisfy some stupid formality. Now don&rsquo;t get me wrong, meetings are important, but only when they&rsquo;re <em>productive</em>. I also don&rsquo;t like the idea of having a schedule to talk about what&rsquo;s good or bad. Imo those things should be discussed as soon as they happen. And those are best to be discussed one on one with the manager, rather than in a group where you won&rsquo;t feel just as free to talk about things.</p>
<p>If you really want to spend your time fulfilling formalities with little to no sense, I suggest becoming a clerk in a state-owned institution in any of the post-communist countries in Europe. You could even earn a pension for doing it.</p>
<p><strong>Evangelism</strong></p>
<p>Do you know what actually has to be evangelized, rather than promoted? That&rsquo;s right, a religion. Or likely a cult. Did you also notice how you need to &ldquo;change your mindset&rdquo; every time they want you to swallow something that sounds downright crazy? There&rsquo;s no need to &ldquo;evangelize&rdquo; anything that sounds even remotely reasonable to most people.</p>
<p><strong>Rituals</strong></p>
<p>See above.</p>
<p><strong>Borderline psychotherapy</strong></p>
<p>Some of those agile &ldquo;gurus&rdquo; are way too enthusiastic about psychology, and I&rsquo;ve seen some collectives resembling a mental institution, or AA at least. Look pal/gal, I know that most programmers have issues, but, first and foremost, this is the workplace, and we&rsquo;re all grown-ups here. Why don&rsquo;t you go finish some college for a start, and run your sessions in your own house and leave us all alone?</p>
<p>Besides - pairing, mobing, but also sprints&hellip; all of them look like some social experiment to me (or a psyop if you will), where <em>peer pressure</em> is intelligently deployed to squeeze out the last drop of productivity juice from every programmer involved. Even the best engines will burn out if you hold the gas pedal on the floor for too long, but that doesn&rsquo;t matter if you can afford changing cars every now and then. And it&rsquo;s hard for me to understand people who actually like to program in pairs. It must be either some ego trip where one keeps showing off their skills to some junior, or the sense of accomplishment for merely giving some input while the other person is doing all the work. But the salary is in the bank account, who cares about merit anyway.</p>
<p><strong>Not giving credit</strong></p>
<p>You&rsquo;ll notice how everything is about great teamwork, team this, team that. Being selfless and all. <em>From each according to his ability, to each according to his needs</em> and similar kind of BS. Newsflash - this is <em>work</em>, and we work for <em>money</em>, and for <em>recognition</em> so we could earn even more money. This is still capitalism as far as I know, and selflessness is for religions, charities and political extremism. Give credit where credit is due, or be ready to lose people. (Just to clarify one thing - none of this justifies being a jerk to your colleagues)</p>
<p><strong>Insistence on vanity metrics</strong></p>
<p>I have a huge issue with giving importance to the test coverage. Do you know that some time ago, a programmer&rsquo;s productivity was measured by the number of lines they could output? Sounds ridiculous, right? I feel just about the same for code coverage measuring code quality. Just because some code was executed in a test, it doesn&rsquo;t mean <em>it works</em>. Those are two different things. I write tests for coverage on a daily basis. They test <em>almost nothing</em>, but that beautiful green color is everywhere. Why? Not because I want to do it that way, but because I&rsquo;m expected to do so. It&rsquo;s also funny how can you exclude code from coverage and still keep that 100%. So, is it really 100% then? What about those non-trivial tests that you wrote, what&rsquo;s testing them? Besides, there are many ways to verify that software works as expected, and not all of it has to be automated on the lowest layer you know. A pedantic QA person is sometimes more valuable than your entire test suite. But tell that to a TDD zealot and be ready for some &ldquo;skill issue&rdquo; <em>ad hominem</em> attacks.</p>
<p>Another stupid thing is the planning poker. Junior points can&rsquo;t be the same as senior points, and averaging it out will somehow make it more trustworthy? And a Fibonacci sequence lol, what&rsquo;s that for? To make it look more like it&rsquo;s rooted in math? Mystical, even? What a pile of rubbish! But I do like <a href="https://www.youtube.com/watch?v=Y7JG63IuaWs">Lateralus</a> though&hellip;</p>
<p>Now some of you might say &ldquo;but something is still better than nothing&rdquo;. Well, I&rsquo;m in the nothing camp this time. It&rsquo;s better not to be in a marriage at all than to be in a really bad one.</p>
<p><strong>Avoidance of all forms of documentation</strong></p>
<p>A lot of people don&rsquo;t like writing documentation, and the most common excuse is that there&rsquo;s no time for it. But do you know what&rsquo;s great about documentation? You don&rsquo;t have to repeat yourself every now and then. New hires can get up to speed without much of your help. Also, a lot of WTFs could meet their &ldquo;ooooh that&rsquo;s why&rdquo; before someone expresses their wish to rewrite everything from scratch. And the company doesn&rsquo;t need to die with your departure either.</p>
<hr>
<p>Ok, I better stop before this post has turned completely from philosophy to <a href="https://www.youtube.com/watch?v=wBw14SVVQTI">free floating hostility</a>, and it&rsquo;s already way too long for most people. If you persisted up to this point, I&rsquo;d like to thank you and congratulate you on your patience.</p>
<p>With all being said, what&rsquo;s next? Well, until there are enough brave souls to speak up and change the status quo, me, and a lot of other people like me, will continue reporting on daily meetings what they did, what they&rsquo;ll do and if they have any blockers.</p>
<p>Maybe I&rsquo;ll apply this advice myself one day. Maybe you&rsquo;ll do it too, dear reader. But I don&rsquo;t expect this to ever become <em>a thing</em>. Why? Because it&rsquo;s common sense. There are no certificates for common sense. There are no expensive two-week education sessions for common sense. There&rsquo;s no branding value to exploit in common sense. So it&rsquo;s just us fighting with our frustrations. But:</p>
<blockquote>
<p>To hell with circumstances; I create opportunities.</p>
</blockquote>
<p>Thanks for reading!</p>
<p><em>All quotes in the text are by Bruce Lee.</em></p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/nzQWYHHqvIw?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

]]></content:encoded>
    </item>
    
    <item>
      <title>TDD - The Toilet-driven development</title>
      <link>https://www.drazengolic.com/blog/tdd/</link>
      <pubDate>Tue, 30 Jul 2024 21:36:47 +0200</pubDate>
      
      <guid>https://www.drazengolic.com/blog/tdd/</guid>
      <description>Warning: profanity ahead!
An opinion is like an asshole. Everyone has one. &amp;ndash; A modern proverb
It feels a bit strange to write anything remotely related to my gastrointestinal tract on a blog (and I really hope no one is genuinely interested in such topics), but there&amp;rsquo;s something funny related to it that will serve as a base of this post: some of my best solutions to hard problems were concieved while I was in the loo.</description>
      <content:encoded><![CDATA[<p><strong>Warning: profanity ahead!</strong></p>
<blockquote>
<p>An opinion is like an asshole. Everyone has one.
&ndash; A modern proverb</p>
</blockquote>
<p>It feels a bit strange to write anything remotely related to my gastrointestinal tract on a blog (and I really hope no one is genuinely interested in such topics), but there&rsquo;s something funny related to it that will serve as a base of this post: some of my best solutions to hard problems were concieved while I was in the loo. I shit you not (pun intended)!</p>
<p>I don&rsquo;t know was it some kind of epiphany, or simply having some quiet time alone to think, but it worked many times, unintentionally. It happend so often that even a CEO of a certain company I was working for noticed it - once when we were discussing some really hard problem at the office (like we did many times before), he turned to me and, to my surprise, half-jokingly said: &ldquo;why don&rsquo;t you go into the loo and come back with a solution?&rdquo;. For better or worse, this is a true story. (And no, this doesn&rsquo;t mean I&rsquo;m spending way too much time over there at work btw)</p>
<p>So you could say I have a <em>methodology</em> that worked for <em>me</em> on many occasions. It would be selfish to keep it to myself, wouldn&rsquo;t it? If it works for me, it must work for everyone else, amirite? Time for enlightening the world, earn some big $$$!</p>
<p>Perhaps I should talk about it on some <em>developer conferences</em>. Or, launch a <em>podcast</em> where I discuss the benefits of toilet time for software development. Maybe even write a <em>book</em>, rebrand <em>TDD</em> into Toilet-driven development. And if my methodology doesn&rsquo;t work for some people, me and my faithful followers could use the opportunity to shout at them on how they <em>can&rsquo;t (do) shit <strong>properly</strong></em>.</p>
<p>But, why stop there? I could also invent shitting in <em>pairs</em>, or even <em>mob</em> shitting. The more the merrier, right? The solutions would just keep dropping out at an incredible rate!</p>
<p>What, you can&rsquo;t share the same toilet seat with someone? Oh, such an introvert! You must work on your social skills, learn to think outside the box. Shitting in a toilet is a social activity now!</p>

<div style="width: 100%; text-align: center;">
<div class="tenor-gif-embed" data-postid="16365000" data-share-method="host" data-aspect-ratio="1.11888" data-width="50%"><a href="https://tenor.com/view/sit-here-bunny-on-toilet-toilet-gif-16365000">Sit Here Bunny On Toilet GIF</a>from <a href="https://tenor.com/search/sit+here-gifs">Sit Here GIFs</a></div> <script type="text/javascript" async src="https://tenor.com/embed.js"></script>
</div>

<p>Now, I hope it&rsquo;s obvious I&rsquo;m exagerating things quite a bit here, but the analogy should be clear. In a nutshell, this is how selling of any particular software development methodology looks to me. Some things work under certain conditions, and with a certain group of people. It&rsquo;s called a context. And anyone with a direct or indirect financial interest into success of a certain methodology will deny the existence of a context, because it would reduce their target area tremendously. And they don&rsquo;t care if the ideas range from wrong to utterly deranged, the perception of those with the money is all what matters.</p>
<p>So, what would be the right methodology to use then? The cold truth is - none. It&rsquo;s a <a href="https://www.drazengolic.com/blog/roll-your-own-methodology/"><em>roll your own</em></a> methodology. If you want trully to be agile, you&rsquo;ll think about your goals, the people that are working with you, and then mix and match what&rsquo;s already out there along with a dose of common sense. But more on that later.</p>
<p>Obviously, all of this is my opinion on the matter. You can agree with me or not. These were not formed over a single day, but I understand that I may not have enough credibility to be taken more than lightly. But, you should also check how credible are the so called &ldquo;authorities&rdquo;. You&rsquo;d be surprised.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Keep a project glossary (with the source code)</title>
      <link>https://www.drazengolic.com/blog/keep-a-project-glossary/</link>
      <pubDate>Mon, 11 Mar 2024 16:40:23 +0200</pubDate>
      
      <guid>https://www.drazengolic.com/blog/keep-a-project-glossary/</guid>
      <description>Introduction &amp;ldquo;A wise one writes it down, a foolish one memorizes it.&amp;rdquo; (sr. &amp;ldquo;паметан пише, будала памти&amp;rdquo;) &amp;ndash; A Serbian proverb
Let&amp;rsquo;s admit it - the biggest enemy of a software project&amp;rsquo;s success is ambiguity. Ambiguity of requirements (am I solving the right problem?), ambiguity of the system design (am I changing things in the right place?), ambiguity in code abstractions (wtf does this thing do?) etc. Anything you can do to reduce ambiguity can only help a project in the long run.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<blockquote>
<p>&ldquo;A wise one writes it down, a foolish one memorizes it.&rdquo; (sr. &ldquo;паметан пише, будала памти&rdquo;)
&ndash; A Serbian proverb</p>
</blockquote>
<p>Let&rsquo;s admit it - the biggest enemy of a software project&rsquo;s success is ambiguity. Ambiguity of requirements (<em>am I solving the right problem?</em>), ambiguity of the system design (<em>am I changing things in the right place?</em>), ambiguity in code abstractions (<em>wtf does this thing do?</em>) etc. Anything you can do to reduce ambiguity can only help a project in the long run.</p>
<p>Humans have a very <a href="https://evidencebased.education/how-limited-is-working-memory-capacity/">limited</a> working memory. Less things we have to keep in our memory, higher the chance we&rsquo;ll make the right decision. And what we can&rsquo;t keep in memory, it should be only a search away, without the need for breaking ours, or anyone else&rsquo;s <a href="https://en.wikipedia.org/wiki/Flow_(psychology)">flow</a>.</p>
<p>The trouble is, with Agile methodologies becoming the default, documenting things is rarely a priority. There&rsquo;s no place you can go and quickly learn what you need. Or there is, but it isn&rsquo;t up to date, or it&rsquo;s scattered among dozens of Slack channels, private chats, Miro boards and whatnot. Important information lives in people&rsquo;s heads. If you don&rsquo;t understand something, the first thing you&rsquo;ll do is to find out who knows what you need, and then go ahead and ask that person. A new hire comes and does the same things like you. Wasted time just keeps adding up. Also, people leave companies, and important information leaves with them, hurting the project (at least until someone else learns the same information in the same way, which means more wasted time).</p>
<p>Most developers don&rsquo;t like writing technical documentation, and it seems that project/product managers don&rsquo;t like writing project documentation either. They just focus on writing user stories, meeting OKR-s and etc., none of which contributes in having an overall picture on what is being solved, how and why. What can make things even worse is when those managers get promoted from another role, not because they have demonstrated a vast domain knowledge or managerial qualities, but because of belief that they&rsquo;ll perform better than in their current role.</p>
<p>With a domain knowledge taken so lightly, no wonder why wrong features get developed, same thing gets done multiple times, solutions get overengineered and many other problems. Also, arguing with someone for hours about something just to figure out that you have a completely different interpretation of what that something means is because there is no single source of truth about that something. All of this drives disinterest into project&rsquo;s success and an employee burn-out.</p>
<h2 id="a-glossary-of-terms">A glossary of terms&hellip;</h2>
<p>One way to reduce ambiguity is to keep everyone on the same page, both current and the future colleagues, when things are being discussed or worked on. Having a glossary of terms used in the project is a great way to do so. For example, if the project is in the e-commerce domain, a glossary should say what an order is. If an order has a status, every status should be described, how it affects an order and so on. Product types, all of the abbreviations used etc.</p>
<p>A glossary of terms could correspond to the ubiquitous language described in the <a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain-Driven Design</a>, that is, a list of unambiguous terms shared by domain experts, users, and developers (note that I&rsquo;m not advocating DDD here, it&rsquo;s just that having a common language is universally a good idea).</p>
<p>This is not a novel idea, it&rsquo;s just forgotten or simply ignored.</p>
<p>Here&rsquo;s <a href="https://en.wikipedia.org/wiki/Rich_Hickey">Rich Hickey</a>, one of my favorite people in this industry, explaining why having a project glossary (I recommend the entire video though):</p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/c5QF2HjHLSE?start=519?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<p>Or, see <a href="https://delatbabel.medium.com/what-is-a-project-glossary-a49e71f5a8e2">here</a> and <a href="https://www.visual-paradigm.com/learning/handbooks/software-design-handbook/project-glossary.jsp">here</a> what makes a project glossary.</p>
<h2 id="defined-in-the-source-code">&hellip;defined in the source code</h2>
<p>If the project documentation isn&rsquo;t exactly a &ldquo;first class citizen&rdquo; on the project you&rsquo;re working on, this is a good, alternative place to maintain a glossary. Why? It will live right with the rest of the project files and be available to all developers, right from the editor. It&rsquo;s versioned, and changes to terminology can be committed together with implementation changes.</p>
<p>You&rsquo;re probably asking yourself now - how does this help at all, since it&rsquo;s available only to developers? As I&rsquo;ve said earlier, it&rsquo;s important for developers to know what they&rsquo;re dealing with in order to execute properly. If no one else cares, then there&rsquo;s no point in maintaining a page in Notion that no one will ever read or update. Maintaining the file will help everyone in the development team, and also help reduce the onboarding time of the new hires.</p>
<h2 id="how-to-make-one">How to make one?</h2>
<p>Chances are, you have an up to date <code>README.md</code> file that explains how to set up the project. You can create an additional file, say <code>glossary.md</code> and highlight in the README that this is the file to refer to for the project terminology. It can follow a simple format, like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="gh"># Glossary
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>
</span></span><span class="line"><span class="cl"><span class="gu">## Term 1
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="cl">Definition of the Term 1. Deprecated, see [<span class="nt">Term 2</span>](<span class="na">#term-2</span>)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">## Term 2
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="cl">Definition of the Term 2</span></span></code></pre></div><p>and so on. Markdown files are easy to read and update, even without rendering into HTML. If you use VS Code, you can use extensions like <a href="https://marketplace.visualstudio.com/items?itemName=RoeySagie.markdown-sort">Markdown sort</a> to maintain the order of the terms, or <a href="https://marketplace.visualstudio.com/items?itemName=AlexandriteSoftware.markdown-search">Markdown Full Text Search</a> for easier search in case of larger files.</p>
<h2 id="conclusion">Conclusion</h2>
<p>So the next time when someone on the project clarifies some term over Slack, MS Teams, e-mail, meeting notes or whatever, make sure to grab the text immediately and put it in the glossary file to persist it, don&rsquo;t just memorize it. Once recorded, insist on that definition in further communication until there is a compelling reason for change.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Securing server APIs for mobile apps without user registration</title>
      <link>https://www.drazengolic.com/blog/secure-mobile-api/</link>
      <pubDate>Tue, 28 Nov 2023 11:30:23 +0200</pubDate>
      
      <guid>https://www.drazengolic.com/blog/secure-mobile-api/</guid>
      <description>The Problem Let&amp;rsquo;s suppose you have to create an API for your mobile app, and the app must be fully functional without asking the users to register (first). This could be for various reasons, for example:
You&amp;rsquo;re just serving some content, and there is no obvious benefit for you or the users from registering You could turn down many users from using the app by asking them to register Creating the social login or login/registration workflow with emails is tedious You&amp;rsquo;re vary of GDPR policies and would rather not to have access to any personal data if you don&amp;rsquo;t need to Yet, you still want to make your APIs exclusive to your app in order to prevent misuse of your data and the resources that you&amp;rsquo;re paying for.</description>
      <content:encoded><![CDATA[<h2 id="the-problem">The Problem</h2>
<p>Let&rsquo;s suppose you have to create an API for your mobile app, and the app must be fully functional without asking the users to register (first). This could be for various reasons, for example:</p>
<ul>
<li>You&rsquo;re just serving some content, and there is no obvious benefit for you or the users from registering</li>
<li>You could turn down many users from using the app by asking them to register</li>
<li>Creating the social login or login/registration workflow with emails is tedious</li>
<li>You&rsquo;re vary of GDPR policies and would rather not to have access to any personal data if you don&rsquo;t need to</li>
</ul>
<p>Yet, you still want to make your APIs exclusive to your app in order to prevent misuse of your data and the resources that you&rsquo;re paying for.</p>
<p>There are a couple of options being used in the wild, but all of them are flawed:</p>
<ol>
<li><em>Fully open API</em> - we already decided this is unacceptable</li>
<li><em>Using a secret key shared between the app and the server</em> - This is easy to break, as the apps are relatively easy to decompile and have all the string constants extracted from them. And if the key gets compromised, you&rsquo;ll have to update both the app and the server, until the new key gets compromised just as the previous one</li>
<li><em>Splitting the key to different parts of the app, or using some simplistic algorithm to generate one</em> - This isn&rsquo;t much harder to discover than a stored string, so it&rsquo;s just as futile as the previous option</li>
</ol>
<p>Now, even if you require users to register, someone savvy enough to extract their legit access token to your APIs can still misuse them if you don&rsquo;t have a mechanism in place to <strong>limit their usage</strong>, such as request limits and throttling. You can limit your API usage based on the IP address (and you should <strong>always</strong> do that!), but this limitation can be easily avoided by using different proxy servers, or by having access to a fleet of hosts with different IP addresses.</p>
<h2 id="the-solution">The Solution</h2>
<p>So, you still need <em>some</em> form of registration. But instead of users, you could <strong>register a device</strong> running your app. But how do you make sure that it&rsquo;s <em>your app</em> that is asking to register, and not something else? With something unique to your app: <strong>push notifications</strong>.</p>
<blockquote>
<p><strong>Disclaimer</strong>: there are no bullet-proof solutions, and neither it&rsquo;s this one. However, it&rsquo;s good enough to keep those less tech-savvy and less motivated at bay, while enabling you to apply different security strategies just like for APIs with user authentication.</p>
</blockquote>
<p>Without further ado, here is a full <a href="https://en.wikipedia.org/wiki/Sequence_diagram">sequence diagram</a> of the device registration workflow:</p>
<figure><img src="/images/mobile_secure_en.png"
    alt="Device registration worflow"><figcaption>
      <p>Device registration worflow</p>
    </figcaption>
</figure>

<p><em><strong>TL;DR</strong>: the app is asking the server to send it a registration URL via push data message, that is also encrypted with a public key generated by the app.</em></p>
<p>After the registration is complete, you can continue with the usual <strong>refresh token</strong> flow to access the APIs.</p>
<p>Some important notes about the challenges:</p>
<ul>
<li>Time to complete the challenge should be relatively short, no more than a couple of minutes</li>
<li>Endpoints for requesting and completing the challenge are open, and should be heavily throttled</li>
<li>There should be a scheduled job in place to regularly delete all of the expired challenges from the database (or set a TTL value if using something like Redis)</li>
</ul>
<p>Generated device ID could be an UUID, or anything similar. And if delivering push notifications is a regular feature of the app, it&rsquo;s a good idea to store the ID with the push service registration token together somewhere (effectively registering a device account) so you could easily update the token on the server when the app receives a new one from the push service. Note that you <strong>don&rsquo;t need</strong> to ask users for permission to retreive data messages without displaying a notification.</p>
<p>Having the device ID in the access and refresh tokens will allow you to limit usage per device, and in case of a detected misbehavior, even deny refreshing the access token (thus shutting down the device account either temporary or permanently). Expiration time for the new access tokens should be reasonably short.</p>
<h2 id="usage-in-the-real-world">Usage in The Real World™</h2>
<p>While I have a PoC project with this design, it&rsquo;s not ready for production yet. But if you like the idea and decide to use it in production yourself, please do give me a shout on how it went over any channel where I&rsquo;m present! Maybe there are no comments on this website, but I&rsquo;d be happy to publish any real world experiences (with your permission) as a part of this article.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Заштита API сервиса за мобилне апликације без регистрације корисника</title>
      <link>https://www.drazengolic.com/sr/blog/secure-mobile-api/</link>
      <pubDate>Tue, 28 Nov 2023 11:30:23 +0200</pubDate>
      
      <guid>https://www.drazengolic.com/sr/blog/secure-mobile-api/</guid>
      <description>Проблем Претпоставимо да је потребно креирати API сервис за мобилну апликацију, при чему апликација мора да буде потпуно функционална без тражења од корисника да се (првобитно) региструју. Разлога може да буде више, на примјер:
Апликација само преузима неки садржај, и нема очигледне користи од регистрације ни за нас ни за кориснике Многе потенцијалне кориснике може да одбије захтјев за регистрацијом Креирање логовања преко социјалних мрежа или регистрације са имејлом и шифром је напорно Брину нас стриктни GDPR прописи и радије не би да имамо приступ приватним подацима ако за њима нема потребе Али, и даље желимо да наши API сервиси буду екслузивни за нашу апликацију, како би спријечили злоупотребу података, али и ресурса за које плаћамо.</description>
      <content:encoded><![CDATA[<h2 id="проблем">Проблем</h2>
<p>Претпоставимо да је потребно креирати API сервис за мобилну апликацију, при чему апликација мора да буде потпуно функционална без тражења од корисника да се (првобитно) региструју. Разлога може да буде више, на примјер:</p>
<ul>
<li>Апликација само преузима неки садржај, и нема очигледне користи од регистрације ни за нас ни за кориснике</li>
<li>Многе потенцијалне кориснике може да одбије захтјев за регистрацијом</li>
<li>Креирање логовања преко социјалних мрежа или регистрације са имејлом и шифром је напорно</li>
<li>Брину нас стриктни GDPR прописи и радије не би да имамо приступ приватним подацима ако за њима нема потребе</li>
</ul>
<p>Али, и даље желимо да наши API сервиси буду екслузивни за нашу апликацију, како би спријечили злоупотребу података, али и ресурса за које плаћамо.</p>
<p>Може се наићи на неколико опција, али су све проблематичне:</p>
<ol>
<li><em>Потпуно отворен API</em> - За ово смо се већ изјаснили да није опција</li>
<li><em>Кориштење тајног кључа, дијељеног између апликације и сервера</em> - Ово је лако провалити, јер се апликације релативно лако декомпајлирају, а текстуалне константе извлаче без проблема. У случају да се кључ открије, потребно је ажурирати и апликацију и сервер, и функционисаће све док се и нови кључ не открије на потпуно исти начин</li>
<li><em>Спремање дијелова кључа на различита мјеста у коду, или кориштење релативно једноставног алгоритма за његово генерисање</em> - Ово није знатно теже за провалити од претходног случаја, тако да подједнако није вриједно труда</li>
</ol>
<p>Међутим, све и да тражимо од корисника да се региструју, неко ко је довољно способан да открије свој легитимно добијени приступни кључ према API сервисима, и даље може да их злоупотријеби уколико не постоји механизам <strong>за ограничавање њиховог кориштења</strong>, попут ограничавања и пригушивања броја захтјева. Можемо поставити ограничења на бази ИП адреса (и то је <strong>увијек</strong> потребно!), али то ограничење се лако заобиђе кориштењем различитих прокси сервера, или са могућношћу приступа већем броју уређаја са конекцијом на интернет и са различитим ИП адресама.</p>
<h2 id="рјешење">Рјешење</h2>
<p>Дакле, и даље нам је потребан <em>некакав</em> вид регистрације. Али, умјесто корисника, можемо да <strong>региструјемо уређај</strong>. Међутим, како ћемо да знамо да је управо <em>наша апликација</em> та која жели да се региструје, а не неко или нешто друго? Тако што ћемо да искористимо нешто што је јединствено за нашу апликацију, а то су <strong>пуш нотификације</strong>.</p>
<blockquote>
<p><strong>Одрицање од одговорности</strong>: не постоје рјешења која су непробојна, а самим тим ни ово није једно од њих. Међутим, довољно је добро да држи подаље оне који су мање технички спретни или мање мотивисани, а уједно и омогућује примјену сигурносних стратегија сличних онима гдје постоје регистровани корисници.</p>
</blockquote>
<p>Без даљег дужења, слиједи потпуни <a href="https://en.wikipedia.org/wiki/Sequence_diagram">дијаграм секвенци</a> процеса регистрације уређаја:</p>
<figure><img src="/images/mobile_secure_sr.png"
    alt="Процес регистрације уређаја"><figcaption>
      <p>Процес регистрације уређаја</p>
    </figcaption>
</figure>

<p><em>Укратко речено: апликација тражи од сервера да јој пошаље УРЛ за регистрацију преко податковне пуш поруке, који је уједно енкриптован јавним кључем који је генерисала апликација.</em></p>
<p>Након што је регистрација завршена, наредне аутентикације уређаја на API могу да се обављају стандардним <strong>освјежавањем токена</strong>.</p>
<p>Важне напомене у вези изазова за регистрацију:</p>
<ul>
<li>Рок да се испуни неки изазов треба да буде релативно кратак, не дужи од пар минута</li>
<li>Серверске руте за захтјевање и испуњавање изазова су јавне, и приступ њима треба да буде што боље ограничен</li>
<li>Потребно је имплементирати некакав процес у позадини који ће да брише све изазове из базе чији је рок истекао (или постављањем TTL вриједности ако се користи нпр. Redis)</li>
</ul>
<p>Генерисани ЈИБ уређаја може да буде UUID или нешто слично. А ако је достављање пуш нотификација саставни дио апликације, онда би било добро негдје сачувати ЈИБ заједно са регистрационим токеном пуш сервиса (и тако ефективно направити налог за уређај), како би се регистрациони токен лако ажурирао на серверу након што мобилна апликација добије нови токен од пуш сервиса. Важно је напоменути да <strong>није потребно</strong> одобрење од корисника апликације за добијање податковних порука уколико оне не садрже нотификације.</p>
<p>Чувајући ЈИБ уређаја унутар приступног токена и токена за освјежавање нам омогућава да ограничимо кориштење сервиса по уређају, а у случају да је детектовано сумњиво понашање, могуће је и одбити захтјев за освјежењем приступног токена и тако привремено или трајно угасити налог. Зато је потребно да рок трајања приступног токена буде разумно кратак.</p>
<h2 id="употреба-у-стварном-свијету">Употреба у Стварном Свијету™</h2>
<p>Иако имам пројекат који је тзв. доказ концепта овог дизајна, он није још увијек спреман за продукцију. Међутим, ако се некоме свидјела идеја и жели да је примијени у својој апликацији, волио бих да сазнам колико добро је прошла, и о том ме можете обавијестити преко било ког канала на којем сам присутан. Можда немам коментаре на овом сајту, али радо ћу објавити искуства из ”стварног свијета” у оквиру овог чланка, наравно уз одобрење.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Build a JSON response directly in PostgreSQL</title>
      <link>https://www.drazengolic.com/blog/json-response-postgres/</link>
      <pubDate>Wed, 22 Nov 2023 11:22:23 +0200</pubDate>
      
      <guid>https://www.drazengolic.com/blog/json-response-postgres/</guid>
      <description>Introduction Anyone involved in web or back-end development had to create an API service at some point that outputs data from a database in a JSON format. A typical database-centric service does more or less 3 things:
Query the data Transform it to the required format Send it over the wire Looks simple, right? But there is a lot more going on just to deliver some data stored in the database.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Anyone involved in web or back-end development had to create an API service at some point that outputs data from a database in a JSON format. A typical database-centric service does more or less 3 things:</p>
<ol>
<li>Query the data</li>
<li>Transform it to the required format</li>
<li>Send it over the wire</li>
</ol>
<p>Looks simple, right? But there is a lot more going on just to deliver some data stored in the database.</p>
<h2 id="the-problem">The Problem</h2>
<h3 id="multiple-steps">Multiple steps</h3>
<p>Once you query the database, you need to deserialize it&rsquo;s result into some data structure or an object (or a set of objects) that you can later use to access or to manipulate the data. If there is a mismatch between the structure of the data and the structure of the response, you need to produce another set of objects from the first ones to create the response. Then you need to serialize them, this time in a JSON format, and then send the JSON string over the wire. That is <strong>one deserialization</strong>, <strong>one serialization</strong>, and <strong>several memory allocations</strong> in between.</p>
<p>If you happen to use a dynamically typed language, you could probably get away with manipulating some hash maps and/or arrays and call it a day. If you happen to use a statically typed language, you&rsquo;ll likely need types declared for both the data model and the response, and maybe even some transitional types.</p>
<h3 id="orms-and-query-builders">ORMs and query builders</h3>
<p>Things can get even more wasteful (not to mention slow) when using these tools, even if one uses them carefully. You may not care about that and enjoy your convenience, but here are some of the things that happen when querying data with them:</p>
<ol>
<li>In an ORM, a model corresponds to a database table and contains the same fields as the table. So every time you query with this model, you&rsquo;ll get <strong>all the fields</strong> from the table even if you don&rsquo;t need them. And in case there is a way to select only the fields you need, you&rsquo;ll end up with an inconsistent model to work with.</li>
<li>Related models are retrieved in two ways: either with <strong>joins</strong> or with <strong>separate queries</strong>.</li>
</ol>
<p>When using joins, number of records are <strong>multiplied</strong> with the number of records found in the joined table, containing the data from both. More joins, more multiplications. And if you happen to use <code>cross join</code>, you&rsquo;ll end up with a <a href="https://en.wikipedia.org/wiki/Cartesian_product">cartesian product</a> of records. Combine that with 1. and that&rsquo;s <strong>a lot</strong> of redundant data to be pulled into memory. It then iterates through the result set in order to produce objects as defined in the model. That means more processing and more memory allocation.</p>
<p>Using separate queries does not require as much memory or processing time, but it does require additional <strong>network hops</strong> to the database, waiting for it&rsquo;s result, and deserializing it into a usable structure.</p>
<h2 id="the-solution">The Solution</h2>
<p>What if I tell you that there is a way avoid all this cruft and tap the response directly from the data source? After all, database systems are not just storage, they are <strong>systems</strong> (the S in RDBMS), which means they are capable of doing much more than just to store and retrieve the data. And the one we&rsquo;re talking about here is a quite powerful one: PostgreSQL.</p>
<h3 id="postgresql-and-json">PostgreSQL and JSON</h3>
<p>PostgreSQL supports JSON as a <a href="https://www.postgresql.org/docs/current/datatype-json.html">data type</a> since version 9.4 released in 2014, allowing for more flexible storage needs. But it&rsquo;s not just storing and searching of JSON as is, there are plenty of <a href="https://www.postgresql.org/docs/current/functions-json.html">functions and operators</a> you can use to create, modify, assert or <a href="https://www.postgresql.org/docs/current/functions-aggregate.html">aggregate</a> JSON objects and arrays right in the SQL query. It does have some <a href="https://www.infoworld.com/article/3651356/jsonb-in-postgresql-today-and-tomorrow.html">limitations</a>, but it&rsquo;s quite useful nevertheless.</p>
<p>There are two types used for JSON: JSON and JSONB. The former is essentially a text that has to be parsed every time when operated on it, while the latter is a binary-optimized type that is faster to access and operate on, and a recommended type to store JSON.</p>
<h3 id="an-example">An example</h3>
<p>For an example I&rsquo;ll use a relation similar to the one I&rsquo;ve encountered recently: let&rsquo;s imagine we have two tables called <code>folder</code> and <code>document</code> in a relation 1:n, where every document belongs to some folder. A single folder has different settings stored as a JSON object, and an array of named web links also stored as JSON. A document contains some key-value properties that is, as you can imagine, also stored as JSON.</p>
<p>An API service to get details of a single folder needs to return all available columns, only a subset of it&rsquo;s settings, and also all of it&rsquo;s documents as an array under <code>documents</code> key.</p>
<figure><img src="/images/folder-document-schema.png"
    alt="An example schema"><figcaption>
      <p>An example schema</p>
    </figcaption>
</figure>

<p>Folder settings look like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;qr_size&#34;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;qr_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#4d00a7&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;folder_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#4d00a7&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;show_label&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;qr_bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#ffffff&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;alert_on_visit&#34;</span><span class="p">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>Folder external links look like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;4cb41be0-ad12-4161-83cb-02c159801be8&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;link&#34;</span><span class="p">:</span> <span class="s2">&#34;https://www.google.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;web&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;Google&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// maybe more links
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">]</span></span></span></code></pre></div><p>Document details look like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;b6f9fe23-d4d6-4a61-b01a-934f3dd61a5e&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mask&#34;</span><span class="p">:</span> <span class="s2">&#34;abc***xyz&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;field name&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;field value&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// maybe more details
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">]</span></span></span></code></pre></div><p>Note how the elements of an array have a generated <code>id</code> field, so that the UI app could manage the elements properly, but it should not be included in the response. Also note the <code>mask</code> field in the document details, which will be addressed later.</p>
<h3 id="writing-the-query">Writing the query</h3>
<p>Let&rsquo;s write the query without including the documents first:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">json_build_object</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;settings&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="s1">&#39;folder_color&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;folder_color&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;external_links&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">json_agg</span><span class="p">(</span><span class="n">el</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">external_links</span><span class="p">)</span><span class="w"> </span><span class="n">el</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">folder</span><span class="w"> </span><span class="n">f</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span></span></span></code></pre></div><p>Used functions and operators explained:</p>
<ul>
<li><code>json_build_object</code> is, obviously, a function to build JSON object by giving it an even number of variadic arguments, alternating key and the value</li>
<li><code>-&gt;</code> is an operator to extract a field from a JSON object as is, whereas <code>-&gt;&gt;</code> extracts value as text</li>
<li><code>jsonb_array_elements</code> expands a top-level JSON array (stored as JSONB, note the prefix jsonb_) into a <em>set</em> of JSON values, so that set operations like <code>select</code> can be used</li>
<li><code>-</code> is an operator that removes a key (and it&rsquo;s value) from the JSON object</li>
<li><code>json_agg</code> is an aggregate function that collects the input values (including NULL) into a JSON array, converting values to JSON</li>
</ul>
<p>Now that we understand the basic building blocks, let&rsquo;s add the documents as well:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">json_build_object</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;settings&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="s1">&#39;folder_color&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;folder_color&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;external_links&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">json_agg</span><span class="p">(</span><span class="n">el</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">external_links</span><span class="p">)</span><span class="w"> </span><span class="n">el</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;documents&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">with</span><span class="w"> </span><span class="n">doc</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">select</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">title</span><span class="p">,</span><span class="w"> </span><span class="k">type</span><span class="p">,</span><span class="w"> </span><span class="n">details</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">document</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">where</span><span class="w"> </span><span class="n">folder_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="k">desc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">json_agg</span><span class="p">(</span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">doc</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w">   
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">doc</span><span class="p">.</span><span class="n">title</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s1">&#39;type&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">doc</span><span class="p">.</span><span class="k">type</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s1">&#39;details&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">json_agg</span><span class="p">(</span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="s1">&#39;value&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;value&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">))</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">doc</span><span class="p">.</span><span class="n">details</span><span class="p">)</span><span class="w"> </span><span class="n">dd</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">from</span><span class="w"> </span><span class="n">doc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">folder</span><span class="w"> </span><span class="n">f</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span></span></span></code></pre></div><p>Here we are using a CTE to fetch and sort the documents in a required order, and then build the JSON array with the aggregate function.</p>
<p>Now that we have the query, what&rsquo;s left is to make a web request handler that will execute it and pipe its response as a HTTP response.</p>
<p>If you are using Go for example, an HTTP handler could look like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">folderGetHandler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// fetch the db connection, query, and the folder id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="nx">row</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">folderId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">s</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">row</span><span class="p">.</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">s</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">server</span><span class="p">.</span><span class="nf">NotFoundResponse</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">w</span><span class="p">.</span><span class="nf">Header</span><span class="p">().</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;content-type&#34;</span><span class="p">,</span> <span class="s">&#34;application/json&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>And a sample response:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;data&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;sample3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;alert_on_visit&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;folder_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#000000&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;external_links&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;link&#34;</span><span class="p">:</span> <span class="s2">&#34;https://www.example.com/pay?id=3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;payment&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;Pay online&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;link&#34;</span><span class="p">:</span> <span class="s2">&#34;name@example.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;email&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;Agent&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;documents&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;title&#34;</span><span class="p">:</span> <span class="s2">&#34;Sample Policy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;correction&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;details&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Detail 1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;New value 1&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;title&#34;</span><span class="p">:</span> <span class="s2">&#34;Sample Policy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;policy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;details&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Detail 1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;Value 1&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="p">},</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Detail 2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;Value 2&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div><h3 id="summary">Summary</h3>
<p>Now compare the code above with what is usually required to make such a service. With a somewhat larger SQL query we avoid:</p>
<ol>
<li>Serialization and deserialization of data into objects and back. Only the response text needs to be decoded.</li>
<li>Joins with related tables</li>
<li>Additional calls to the database</li>
<li>Redundant data delivered over the network, or processed anywhere within the app</li>
<li>Additional types declared</li>
<li>Having to edit on multiple places to change the response structure</li>
</ol>
<p>And with proper <a href="https://www.drazengolic.com/blog/text-search-postgres/">indexing</a> of tables, the response time will be <em>noticeably shorter</em>.</p>
<h2 id="some-challenges">Some challenges</h2>
<p>As you may have expected, cutting through all these layers of abstraction does introduce some additional challenges when it comes to making the design decision. Below are some of them.</p>
<h3 id="data-outside-the-database">Data outside the database</h3>
<p>Perhaps not all of the data you need to return is stored in the database. Some of it can live i.e. in the user session, or some shared resource.</p>
<p>If the amount of such data is small, it can be made as a part of the query, and have the database return it back as a part of the response. Larger samples could require some string building and concatenation, which isn&rsquo;t exactly a favorable thing. But if a significant portion of response data is not in the database, then this approach isn&rsquo;t suitable and could become a source of trouble more than it&rsquo;d be beneficial.</p>
<h3 id="custom-transformations">Custom transformations</h3>
<p>Remember the <code>mask</code> field in the document details that I&rsquo;ve mentioned to take note in the example above? The requirement that wasn&rsquo;t addressed in the example was to mask the value by one of the predefined patterns, which is the value of the mask field. So, should we just drop all of this and go the usual way just for one small transformation? Not necessarily. The transformation is a simple function without side effects (pure), and could be easily written as a PL/pgSQL <a href="https://www.postgresql.org/docs/current/sql-createfunction.html">function</a>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PL/pgSQL" data-lang="PL/pgSQL"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">or</span><span class="w"> </span><span class="k">replace</span><span class="w"> </span><span class="k">function</span><span class="w"> </span><span class="n">mask_detail</span><span class="p">(</span><span class="n">mask</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w"> </span><span class="n">v</span><span class="w"> </span><span class="nb">text</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">returns</span><span class="w"> </span><span class="nb">text</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">language</span><span class="w"> </span><span class="n">plpgsql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">immutable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">parallel</span><span class="w"> </span><span class="n">safe</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">returns</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">input</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">as</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$$</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">declare</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">output</span><span class="w"> </span><span class="nb">text</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="nb">int</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">begin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">trim</span><span class="p">(</span><span class="n">v</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">length</span><span class="p">(</span><span class="n">output</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="k">case</span><span class="w"> </span><span class="n">mask</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="c1">-- mask middle text
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w"> </span><span class="k">when</span><span class="w"> </span><span class="s1">&#39;abc***xyz&#39;</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">case</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">when</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mf">6</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">3</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;***&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mf">2</span><span class="p">,</span><span class="w"> </span><span class="mf">3</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">when</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">6</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;***&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">when</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mf">1</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;***&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="n">len</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">when</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">0</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;***&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">end</span><span class="w"> </span><span class="k">case</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="c1">-- other cases omitted for clarity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w"> </span><span class="k">else</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="n">output</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="k">end</span><span class="w"> </span><span class="k">case</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">output</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">end</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$$</span></span></span></code></pre></div><p>Now the document detail subquery could look like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">json_agg</span><span class="p">(</span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s1">&#39;value&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">mask_detail</span><span class="p">(</span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;mask&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;value&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">))</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">details</span><span class="p">)</span><span class="w"> </span><span class="n">dd</span></span></span></code></pre></div><p>All of this means that you might need to offload some data specific code to the database layer too, not just the creation of the response. If you don&rsquo;t like the idea of code spreading to the database (that you manage through a migration system just like the tables), then this approach will hardly resonate with you.</p>
<p>On the other hand, it&rsquo;s not uncommon to have an application consisted of multiple services doing different things, so you could think of PostgreSQL as another <strong>service</strong> you communicate with through an RPC API that parses SQL instead of protobuf or JSON.</p>
<h3 id="dynamic-queries">Dynamic queries</h3>
<p>A reasonable question at this point is: <em>How do I make the queries dynamically? Don&rsquo;t tell me I need to concat SQL strings like in the early days of PHP?</em></p>
<p>Building queries with string concatenation is bad indeed - it hurts readability and it&rsquo;s prone to errors. With ORMs out the window, what really is there for us? And since the queries we&rsquo;ll be writing are a bit longer than usual, the solution I&rsquo;m going to propose is the same one that people created in order not to concatenate strings to produce HTML: <strong>a template language</strong>.</p>
<p>It could be any established template language that has the following properties:</p>
<ol>
<li>It has a syntax that is easy to spot in the text. The ones based on using braces will probably fit.</li>
<li>It is fast to parse, or it has a caching mechanism so that parsed templates could be reused multiple times.</li>
</ol>
<p>I tried this with Go&rsquo;s <a href="https://pkg.go.dev/text/template">text/template</a> and embedding the files with <a href="https://pkg.go.dev/embed">embed</a> directives, and so far I don&rsquo;t hate it (but could use a better editor support though). Note that you don&rsquo;t need Go for this, you could try something similar with <a href="https://twig.symfony.com/">Twig</a>, <a href="https://shopify.github.io/liquid/">Liquid</a>, <a href="http://mustache.github.io/">Mustache</a> or basically any other template language you see fit.</p>
<p>To see how it looks, have a peek at this example, where the user data linked to the folder is optional:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">json_build_object</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;settings&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="s1">&#39;folder_color&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;folder_color&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">{{</span><span class="k">if</span><span class="w"> </span><span class="p">.</span><span class="n">ShowUser</span><span class="err">}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;user_name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;user_profile&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="n">profile</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">{{</span><span class="k">end</span><span class="err">}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;external_links&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">json_agg</span><span class="p">(</span><span class="n">el</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">external_links</span><span class="p">)</span><span class="w"> </span><span class="n">el</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">from</span><span class="w"> </span><span class="n">folder</span><span class="w"> </span><span class="n">f</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">{{</span><span class="k">if</span><span class="w"> </span><span class="p">.</span><span class="n">ShowUser</span><span class="err">}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">inner</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="k">public</span><span class="p">.</span><span class="k">user</span><span class="w"> </span><span class="n">u</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">user_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">{{</span><span class="k">end</span><span class="err">}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span></span></span></code></pre></div><p>Not ideal, but arguably better than concatenation. And you have all the power of SQL at your fingertips.</p>
<h2 id="conclusion">Conclusion</h2>
<p>By presenting this idea, I hope I&rsquo;ve nudged you further into exploration of what your tools at hand can do to make things simpler and faster. It&rsquo;s easy to stick to the &ldquo;lowest common denominator&rdquo; design, a &ldquo;we&rsquo;ve always done it this way&rdquo; mindset, and, figuratively speaking, dispose many useful things to the attic to collect dust just because you&rsquo;re not sure if you should use them. And as a true engineer, always do the cost-benefit analysis of every idea in the given context.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Формирај JSON одговор директно у PostgreSQL-у</title>
      <link>https://www.drazengolic.com/sr/blog/json-response-postgres/</link>
      <pubDate>Wed, 22 Nov 2023 11:22:23 +0200</pubDate>
      
      <guid>https://www.drazengolic.com/sr/blog/json-response-postgres/</guid>
      <description>Увод Свако ко се бавио са веб или серверским развојем је у неком тренутку морао да направи API сервис који доставља податке из базе података у JSON формату по некој структури. Типичан овакав сервис ради више-мање 3 ствари:
Шаље упит на базу и чита резултате Трансформише податке у тражени формат Враћа одговор Дјелује једноставно, зар не? Али ту се дешава много више ствари испод хаубе, само да би се доставили некакви подаци из базе.</description>
      <content:encoded><![CDATA[<h2 id="увод">Увод</h2>
<p>Свако ко се бавио са веб или серверским развојем је у неком тренутку морао да направи API сервис који доставља податке из базе података у JSON формату по некој структури. Типичан овакав сервис ради више-мање 3 ствари:</p>
<ol>
<li>Шаље упит на базу и чита резултате</li>
<li>Трансформише податке у тражени формат</li>
<li>Враћа одговор</li>
</ol>
<p>Дјелује једноставно, зар не? Али ту се дешава много више ствари испод хаубе, само да би се доставили некакви подаци из базе.</p>
<h2 id="проблем">Проблем</h2>
<h3 id="вишеструки-кораци">Вишеструки кораци</h3>
<p>Након што се добије резултат упита на базу, потребно га је десеријализовати у некакву структуру података или објекат (или скуп објеката) који се касније могу искористити за приступ подацима или њихову модификацију. Уколико постоји неслагање између структуре података у бази и структуре одговора који сервис враћа, потребно је креирати још један скуп објеката од првобитног скупа како би се добио одговор. Затим је потребно серијализовати нови скуп објеката, овај пут у JSON формат, и послати стринг као одговор. То је <strong>једна десеријализација</strong>, <strong>једна серијализација</strong>, и <strong>вишеструко алоцирање меморије</strong> између.</p>
<p>Уколико се користи језик са динамичким типовима, вјероватно је могуће проћи са манипулацијом хеш мапи и/или низова и завршити посао. А ако је у питању језик са статичким типовима, вјероватно би било потребно дефинисати типове за модел података, за одговор, а можда и некакве прелазне типове потребне у процесу.</p>
<h3 id="orm-ови-и-градитељи-упита">ORM-ови и ”градитељи упита”</h3>
<p>Ствари могу да постану још растрошније (да не спомињем и спорије) када се користе ови алати, чак и када се користе опрезно. Можда те то не занима и важнија ти је погодност кориштења, али ево пар ствари које се дешавају када се користе ови алати за упите на базу:</p>
<ol>
<li>У ORM алату, модел (класа) одговара табели у бази, и садржи сва поља као и табела. Сваки пут када се креира упит са овим моделом, извлаче се подаци <strong>из свих колона</strong> табеле, чак и када нису потребни. У случају да постоји начин да се селектују само нека од поља, добија се модел који није конзистентан.</li>
<li>Модели који су у вези са првобитним добијају се на два начина: или са <strong>спајањима (joins)</strong> или <strong>засебним упитима</strong>.</li>
</ol>
<p>Када се користи спајање, број добијених уписа се мултиплицира са бројем уписа из везне табеле, и сваки ред садржи податке из обе табеле. Више операција спајања, више мултиплицирања редова. А ако се користи <code>cross join</code>, резултат је <a href="https://sr.wikipedia.org/wiki/%D0%94%D0%B5%D0%BA%D0%B0%D1%80%D1%82%D0%BE%D0%B2_%D0%BF%D1%80%D0%BE%D0%B8%D0%B7%D0%B2%D0%BE%D0%B4">декартов производ</a> уписа. Комбинујући ово са чињеницом под 1., то је <strong>много</strong> редундантних података које је потребно доставити преко мреже и смјестити у меморију. Затим је потребно проћи кроз све те редове како би се креирала структура дефинисана моделом података, што значи додатно вријеме за обраду и додатне алокације меморије.</p>
<p>Кориштење засебних упита не захтјева толико меморије или времена за обраду, али захтјева додатне <strong>мрежне скокове</strong> према бази података, чекање на њен одговор, и десеријализацију одговора у корисну структуру.</p>
<h2 id="рјешење">Рјешење</h2>
<p>Шта ако је могуће пресјећи кроз све ове слојеве и добити одговор директно са извора података? Ипак, системи база података нису само мјесто за податаке, то су <strong>системи</strong> (С у СУБП), што значи да њихове могућности превазилазе пуко смјештање и добављање података. А систем о коме је овде говоримо је врло моћан: PostgreSQL.</p>
<h3 id="postgresql-и-json">PostgreSQL и JSON</h3>
<p>PostgreSQL подржава JSON као <a href="https://www.postgresql.org/docs/current/datatype-json.html">тип података</a> од верзије 9.4 пуштене 2014, и тако омогућио флексибилније начине чувања података. Али није у питању само чување и претраживање JSON података, постоји много <a href="https://www.postgresql.org/docs/current/functions-json.html">функција и оператора</a> који се могу искористити за креирање, модификацију, тестирање или <a href="https://www.postgresql.org/docs/current/functions-aggregate.html">агрегирање</a> JSON објеката и низова директно као резултат SQL упита. Иако постоје одређена <a href="https://www.infoworld.com/article/3651356/jsonb-in-postgresql-today-and-tomorrow.html">ограничења</a>, корисност ове функционалности је неупитна.</p>
<p>Постоје два типа која се користе за JSON: JSON и JSONB. Први је у суштини текст који је потребно парсирати сваки пут кад се оперише над њим, док је други бинарно оптимизован за бржи приступ и операције над подацима, и генерално се препоручује као тип за чување у бази.</p>
<h3 id="примјер">Примјер</h3>
<p>Као примјер ћу да искористим релацију сличну једној са којом сам се сусрео недавно: замислимо да имамо двије табеле назване <code>folder</code> и <code>document</code>, а које су у релацији 1:н, гдје сваки документ припада неком фолдеру. Сваки фолдер има своја подешавања која се чувају као JSON објекат, и има низ именованих веб линкова који се такође чувају као JSON. Документ садржи детаље који се презентују као кључ-вриједност, а који се такође, наравно, чувају као JSON.</p>
<p>API сервис који добаља детаље неког фолдера мора да врати све доступне колоне фолдера, подскуп његових подешавања, али и све његове документе као низ под <code>documents</code> атрибутом.</p>
<figure><img src="/images/folder-document-schema.png"
    alt="Шема"><figcaption>
      <p>Шема</p>
    </figcaption>
</figure>

<p>Подешавања фолдера изгледају отприлике овако:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;qr_size&#34;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;qr_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#4d00a7&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;folder_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#4d00a7&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;show_label&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;qr_bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#ffffff&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;alert_on_visit&#34;</span><span class="p">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>Екстерни веб линкови изгледају овако:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;4cb41be0-ad12-4161-83cb-02c159801be8&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;link&#34;</span><span class="p">:</span> <span class="s2">&#34;https://www.google.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;web&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;Google&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// можда још линкова
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">]</span></span></span></code></pre></div><p>Детаљи документа изгледају овако:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;b6f9fe23-d4d6-4a61-b01a-934f3dd61a5e&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mask&#34;</span><span class="p">:</span> <span class="s2">&#34;abc***xyz&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;име поља&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;вриједност поља&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// можда још детаља
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">]</span></span></span></code></pre></div><p>Примјетимо како елементи низова имају генерисано <code>id</code> поље, како би кориснички дио апликације адекватно управљао са њима. Али они не треба да буду укључени у одговор. Такође примјетимо поље <code>mask</code> у детаљима документа, на које ћемо се вратити касније.</p>
<h3 id="писање-упита">Писање упита</h3>
<p>Прво напишимо упит без укључивања докумената:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">json_build_object</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;settings&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="s1">&#39;folder_color&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;folder_color&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;external_links&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">json_agg</span><span class="p">(</span><span class="n">el</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">external_links</span><span class="p">)</span><span class="w"> </span><span class="n">el</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">folder</span><span class="w"> </span><span class="n">f</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span></span></span></code></pre></div><p>Објашњења кориштених фукција и оператора:</p>
<ul>
<li><code>json_build_object</code> је, очигледно, функција за креирање JSON објекта тако што јој се прослиједи промјенљив, али паран број аргумената, смјењујући кључ и вриједност наизмјенично</li>
<li><code>-&gt;</code> је оператор за екстрактовање вриједности из JSON објекта под неким кључем у оригиналној верзији, док оператор <code>-&gt;&gt;</code> екстрактује вриједност као текст</li>
<li><code>jsonb_array_elements</code> проширује JSON низ (чуван као JSONB, примјетимо префикс jsonb_) у <em>скуп</em> JSON вриједности, како би се операције над скуповима попут <code>select</code> могле да користе</li>
<li><code>-</code> је оператор којим се уклања кључ (и вриједност под њим) из JSON објекта</li>
<li><code>json_agg</code> је агрегатна функција која скупља улазне вриједности (укључујући NULL) у JSON низ, при том конвертујући вриједности у JSON</li>
</ul>
<p>Сада када разумијемо основне градивне јединице, додајмо и подупит за документе:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">json_build_object</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;settings&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="s1">&#39;folder_color&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;folder_color&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;external_links&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">json_agg</span><span class="p">(</span><span class="n">el</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">external_links</span><span class="p">)</span><span class="w"> </span><span class="n">el</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;documents&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">with</span><span class="w"> </span><span class="n">doc</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">select</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">title</span><span class="p">,</span><span class="w"> </span><span class="k">type</span><span class="p">,</span><span class="w"> </span><span class="n">details</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">document</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">where</span><span class="w"> </span><span class="n">folder_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="k">desc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">json_agg</span><span class="p">(</span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">doc</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w">   
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">doc</span><span class="p">.</span><span class="n">title</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s1">&#39;type&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">doc</span><span class="p">.</span><span class="k">type</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s1">&#39;details&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">json_agg</span><span class="p">(</span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="s1">&#39;value&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;value&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">))</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">doc</span><span class="p">.</span><span class="n">details</span><span class="p">)</span><span class="w"> </span><span class="n">dd</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">from</span><span class="w"> </span><span class="n">doc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">folder</span><span class="w"> </span><span class="n">f</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span></span></span></code></pre></div><p>Овде је искориштен CTE како би се добили и сортирали документи у траженом редослиједу, а затим се од њих креира JSON низ помоћу агрегатне функције.</p>
<p>Сада када имамо упит, још је преостало да креирамо код који прихвата веб захтјев, извршава упит и просљеђује одговор без обраде.</p>
<p>Ако користимо нпр. Go, HTTP ”руковалац” би могао да изгледа овако:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">folderGetHandler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// добавити конекцију на базу, упит и број фолдера
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="nx">row</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">folderId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">s</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">row</span><span class="p">.</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">s</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">server</span><span class="p">.</span><span class="nf">NotFoundResponse</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">w</span><span class="p">.</span><span class="nf">Header</span><span class="p">().</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;content-type&#34;</span><span class="p">,</span> <span class="s">&#34;application/json&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>А ево и примјер одговора:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;data&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;sample3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;alert_on_visit&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;folder_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#000000&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;external_links&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;link&#34;</span><span class="p">:</span> <span class="s2">&#34;https://www.example.com/pay?id=3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;payment&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;Pay online&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;link&#34;</span><span class="p">:</span> <span class="s2">&#34;name@example.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;email&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;Agent&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;documents&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;title&#34;</span><span class="p">:</span> <span class="s2">&#34;Sample Policy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;correction&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;details&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Detail 1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;New value 1&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;title&#34;</span><span class="p">:</span> <span class="s2">&#34;Sample Policy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;policy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;details&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Detail 1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;Value 1&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="p">},</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Detail 2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;Value 2&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div><h3 id="резиме">Резиме</h3>
<p>Упоредимо код изнад са оним који би се иначе користио за овакве сервисе. Са нешто дужим SQL упитом избјегавамо:</p>
<ol>
<li>Серијализацију и десеријализацију података у објекте и обратно. Само текст треба да се декодује.</li>
<li>Спајање са везним табелама</li>
<li>Додатне позиве на базу</li>
<li>Достављање редундантних података преко мреже, као и њихово процесирање било гдје у апликацији</li>
<li>Дефинисање додатних типова</li>
<li>Потребу за едитовањем на више мјеста како би се измјенила структура одговора</li>
</ol>
<p>А уз адекватно <a href="https://www.drazengolic.com/sr/blog/text-search-postgres/">индексирање</a> табела, вријеме одзива сервиса ће да буде <em>примјетно краће</em>.</p>
<h2 id="изазови">Изазови</h2>
<p>Као што се може да се наслути, уклањање низа слојева апстракције на овај начин доноси и одређене изазове које је потребно узети у обзир приликом доношења одлуке о дизајну. Испод су наведени неки од њих.</p>
<h3 id="подаци-изван-базе-података">Подаци изван базе података</h3>
<p>Можда се подаци које је потребно вратити у одговору не налазе сви у бази података. Неки од њих могу да се налазе нпр. у корисничкој сесији, или у неком дјељеном ресурсу.</p>
<p>Ако је количина тих података мала, онда би могли да се начине као дио упита, и затим их добити назад као дио одговора. Веће количине би вјероватно захтјевале обраду или спајање текста, што није баш погодно ни препоручљиво. Али ако се значајан дио одговора не налази у бази, онда овај приступ није адекватан, и више ће да створи проблема него што ће да буде користан.</p>
<h3 id="специфичне-трансформације">Специфичне трансформације</h3>
<p>Сада је вријеме да се вратимо на поље <code>mask</code> споменуто у примјеру. Захтјев који није ријешен у примјеру је да се детаљи из документа могу маскирати по неком предефинисаном шаблону, а који је смјештен у том пољу. Да ли то значи да треба да одбацимо све урађено и вратимо се на стари начин, због једне мање трансформације? Не нужно. Трансформација коју је потребно извршити је релативно једноставна, нема тзв. бочних ефеката, и може се лако написати као PL/pgSQL <a href="https://www.postgresql.org/docs/current/sql-createfunction.html">функција</a>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PL/pgSQL" data-lang="PL/pgSQL"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">or</span><span class="w"> </span><span class="k">replace</span><span class="w"> </span><span class="k">function</span><span class="w"> </span><span class="n">mask_detail</span><span class="p">(</span><span class="n">mask</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w"> </span><span class="n">v</span><span class="w"> </span><span class="nb">text</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">returns</span><span class="w"> </span><span class="nb">text</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">language</span><span class="w"> </span><span class="n">plpgsql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">immutable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">parallel</span><span class="w"> </span><span class="n">safe</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">returns</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">input</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">as</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$$</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">declare</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">output</span><span class="w"> </span><span class="nb">text</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="nb">int</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">begin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">trim</span><span class="p">(</span><span class="n">v</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">length</span><span class="p">(</span><span class="n">output</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="k">case</span><span class="w"> </span><span class="n">mask</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="c1">-- mask middle text
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w"> </span><span class="k">when</span><span class="w"> </span><span class="s1">&#39;abc***xyz&#39;</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">case</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">when</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mf">6</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">3</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;***&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mf">2</span><span class="p">,</span><span class="w"> </span><span class="mf">3</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">when</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">6</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;***&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">when</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mf">1</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;***&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="n">len</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">when</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">0</span><span class="w"> </span><span class="k">then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">substring</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;***&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">end</span><span class="w"> </span><span class="k">case</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="c1">-- other cases omitted for clarity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w"> </span><span class="k">else</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="n">output</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="k">end</span><span class="w"> </span><span class="k">case</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">output</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">end</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$$</span></span></span></code></pre></div><p>Сада подупит за детаље документа може да изгледа овако:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">json_agg</span><span class="p">(</span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s1">&#39;value&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">mask_detail</span><span class="p">(</span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;mask&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">dd</span><span class="w"> </span><span class="o">-&gt;&gt;</span><span class="w"> </span><span class="s1">&#39;value&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">))</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">details</span><span class="p">)</span><span class="w"> </span><span class="n">dd</span></span></span></code></pre></div><p>Све ово значи да ће можда бити потребно да се и одређени дио кода, а који је уско везан за податке, пребаци у слој базе података (а са којим се управља кроз систем миграција, као и са табелама), а не само креирање одговора кроз упит. Ова идеја тешко ће да легне некоме коме се не допада да има логику ”разбацану на више мјеста”.</p>
<p>Са друге стране, није неуобичајена појава да нека апликација функционише као низ одвојених сервиса задужених за различите ствари, па би PostgreSQL могао да се посматра као засебан <strong>сервис</strong> са којим се комуницира преко RPC API-ја, а који умјесто protobuf или JSON формата парсира SQL.</p>
<h3 id="динамички-упити">Динамички упити</h3>
<p>Разумно питање у овом моменту би било: <em>Како динамички да креирам упите? Немој ми рећи да сад треба да спајам SQL стрингове као у раним данима PHP-а?</em></p>
<p>Креирање упита спајањем стрингова заиста јесте лоше рјешење - читљивост је лоша и погодно је тло за грешке. Како смо установили да ORM није опција, шта нам друго преостаје? Пошто су сада упити нешто дужи него иначе, рјешење које ћу да предложим је исто оно које су људи измислили како не би користили спајање стрингова за генерисање HTML кода: <strong>шаблонски језик</strong>.</p>
<p>То може да буде било који шаблонски језик са сљедећим особинама:</p>
<ol>
<li>Има синтаксу која је лако уочљива у тексту. Они засновани на великим заградама би требало да одговарају.</li>
<li>Брзо се парсира, или има механизам за кеширање, како би се једном парсирани шаблон могао да користи више пута.</li>
</ol>
<p>Испробао сам овај начин са Go-овим <a href="https://pkg.go.dev/text/template">text/template</a> и ембедовањем фајлова помоћу <a href="https://pkg.go.dev/embed">embed</a> директива, и за сада ми није одбојан (мада волио бих да постоји боља подршка за едитор). Напомињем да није потребан Go за ово, може се пробати нешто слично са шаблонским језицима попут <a href="https://twig.symfony.com/">Twig</a>, <a href="https://shopify.github.io/liquid/">Liquid</a>, <a href="http://mustache.github.io/">Mustache</a> или било ког другог који би могао да одговара.</p>
<p>А како то заправо изгледа може да се види у примјеру испод, гдје су подаци о кориснику везаном за фолдер опциони:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">json_build_object</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;settings&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">json_build_object</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;alert_on_visit&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="s1">&#39;folder_color&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">settings</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">&#39;folder_color&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">{{</span><span class="k">if</span><span class="w"> </span><span class="p">.</span><span class="n">ShowUser</span><span class="err">}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;user_name&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;user_profile&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="n">profile</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">{{</span><span class="k">end</span><span class="err">}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;external_links&#39;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">json_agg</span><span class="p">(</span><span class="n">el</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">from</span><span class="w"> </span><span class="n">jsonb_array_elements</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">external_links</span><span class="p">)</span><span class="w"> </span><span class="n">el</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">from</span><span class="w"> </span><span class="n">folder</span><span class="w"> </span><span class="n">f</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">{{</span><span class="k">if</span><span class="w"> </span><span class="p">.</span><span class="n">ShowUser</span><span class="err">}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">inner</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="k">public</span><span class="p">.</span><span class="k">user</span><span class="w"> </span><span class="n">u</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">user_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">{{</span><span class="k">end</span><span class="err">}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span></span></span></code></pre></div><p>Није идеално, али цијеним да је боље рјешење од спајања стрингова. И при том је на располагању сав подржан SQL, без потребе за ”превођењем”.</p>
<h2 id="закључак">Закључак</h2>
<p>Презентујући ову идеју, надам се да сам подстакао читаоце на даље истраживање могућности алата које свакодневно користе, како би дошли до рјешења која су једноставнија и/или бржа. Лако је држати се принципа који су &ldquo;најмањи заједнички именилац&rdquo;, и менталитета &ldquo;одувијек радимо на овај начин&rdquo;, и на тај начин, фигуративно речено, одложити многе корисне ствари на таван да скупљају прашину, јер нисмо сигурни да ли да их користимо. И да, као прави инжењери, пажљиво анализирају исплативост сваке идеје у неком датом контексту.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Speeding up text pattern searching and sorting in PostgreSQL</title>
      <link>https://www.drazengolic.com/blog/text-search-postgres/</link>
      <pubDate>Fri, 16 Jul 2021 23:33:12 +0200</pubDate>
      
      <guid>https://www.drazengolic.com/blog/text-search-postgres/</guid>
      <description>Introduction Suppose you have a table with records that you want to be searchable by a textual attribute, such as name or title. You also need to sort those records in a certain way that is not necessarily linked to the name or title - for example, you want to display the most recent records, or the most popular ones, first. After a certain period, the table has grown in size and search has become very slow, so you need to speed it up somehow.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Suppose you have a table with records that you want to be searchable by a textual attribute, such as name or title. You also need to sort those records in a certain way that is not necessarily linked to the name or title - for example, you want to display the most recent records, or the most popular ones, first. After a certain period, the table has grown in size and search has become very slow, so you need to speed it up somehow. What are your options?</p>
<p>What follows are some of the SQL performance optimization techniques, with accent on avoiding the sort operation as being potentially <a href="https://use-the-index-luke.com/sql/sorting-grouping">expensive operation</a>.</p>
<p>As an example, we&rsquo;ll be using a sample table that holds data about various music artists:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">integer</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="nb">character</span><span class="w"> </span><span class="nb">varying</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">cover_photo</span><span class="w"> </span><span class="nb">character</span><span class="w"> </span><span class="nb">varying</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">short_bio</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">active</span><span class="w"> </span><span class="nb">boolean</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">rating</span><span class="w"> </span><span class="nb">bigint</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span></span></span></code></pre></div><p>While some of the concepts can be reused in different database systems, this article will discuss mostly PostgreSQL and it&rsquo;s features.</p>
<h2 id="prefixpostfix-search">Prefix/postfix search</h2>
<p>While searching for text that starts (or ends) in a certain way is not that common, it is worth describing on how to optimize in such cases, since it can be done with standard b-tree indexes.</p>
<p>Prefix and postfix search use the <code>LIKE</code> operator, with a <code>%</code> sign at the end (prefix), or in front (postfix) of input text to search for. To make the search case-insensitive, you can either use <code>ILIKE</code> operator , or convert both column and input text to either lower or upper case.</p>
<h3 id="prefix-search">Prefix search</h3>
<p>Prepared statement for prefix search could look like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">prepare</span><span class="w"> </span><span class="n">mas</span><span class="p">(</span><span class="nb">text</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">ilike</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">limit</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span></span></span></code></pre></div><p>Running <code>explain</code> on this query shows that whole table needs to be read sequentially, results are then sorted in memory, and then the first 5 results are selected:</p>





<pre tabindex="0"><code>=&gt; explain execute mas(&#39;the&#39;);
                                           QUERY PLAN
------------------------------------------------------------------------------------------------
 Limit  (cost=29890.60..29891.17 rows=5 width=50)
   -&gt;  Gather Merge  (cost=29890.60..34297.28 rows=38319 width=50)
         Workers Planned: 1
         -&gt;  Sort  (cost=28890.59..28986.39 rows=38319 width=50)
               Sort Key: rating DESC
               -&gt;  Parallel Seq Scan on music_artist  (cost=0.00..28254.12 rows=38319 width=50)
                     Filter: (active AND ((name)::text ~~* &#39;the%&#39;::text))</code></pre><p>Since b-tree index supports prefix search of text (case sensitive), we can create an index that will contain <strong>name</strong> and <strong>rating</strong> columns, with <strong>name</strong> stored in lower case:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="n">pref_search_idx</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> </span><span class="p">(</span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="p">,</span><span class="w"> </span><span class="k">lower</span><span class="p">(</span><span class="n">name</span><span class="p">))</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="p">;</span></span></span></code></pre></div><p>This index is a partial, function-based index that stores transformed data for all rows that have the <strong>active</strong> column set to <code>true</code>. As we are interested in the most popular results first, we&rsquo;ll use the modifier <code>desc</code> on the <strong>rating</strong> column, and also place it as a first column within the index definition, since the index needs to match the <code>ORDER BY</code> clause as well.</p>
<p>To update statistics after the new index is created, use <code>analyze music_artist;</code> command.</p>
<p>Now the query needs to be rewritten so it makes use of the new index by using standard <code>LIKE</code> operator, with the column and the input text transformed to lower case:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">prepare</span><span class="w"> </span><span class="n">mas2</span><span class="p">(</span><span class="nb">text</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="k">lower</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="k">lower</span><span class="p">(</span><span class="err">$</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">limit</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span></span></span></code></pre></div><p>Execution plan of the new query now only has an index scan that stops after the first 5 results are retrieved:</p>





<pre tabindex="0"><code>=&gt; explain execute mas2(&#39;the&#39;);
                                            QUERY PLAN
--------------------------------------------------------------------------------------------------
 Limit  (cost=0.43..36.77 rows=5 width=50)
   -&gt;  Index Scan using pref_search_idx on music_artist  (cost=0.43..58586.92 rows=8061 width=50)
         Filter: (lower((name)::text) ~~ &#39;the%&#39;::text)</code></pre><p>Response time is now improved from several hundreds of milliseconds down to only a handful of milliseconds (in a test environment with around 1.6M records in the table)!</p>
<p>As you can see, there is no <code>Sort</code> step in the query execution plan, which means that results are already sorted, and no additional sorting is required.</p>
<h3 id="caveats">Caveats</h3>
<p>While the retrieval of popular records will be fast, you could experience significant drop in performance when the search needs to go deeper to find less popular records. If the performance becomes really bad in such cases, it can be further improved by creating a covering index (instead of the previous one) that will include all the columns from the query:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- covering index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">create</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="n">pref_search_idx</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> </span><span class="p">(</span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="p">,</span><span class="w"> </span><span class="k">lower</span><span class="p">(</span><span class="n">name</span><span class="p">))</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">include</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">cover_photo</span><span class="p">,</span><span class="w"> </span><span class="n">short_bio</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- new query
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">prepare</span><span class="w"> </span><span class="n">mas4</span><span class="p">(</span><span class="nb">text</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">cover_photo</span><span class="p">,</span><span class="w"> </span><span class="n">short_bio</span><span class="p">,</span><span class="w"> </span><span class="n">rating</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="k">lower</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="k">lower</span><span class="p">(</span><span class="err">$</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">limit</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span></span></span></code></pre></div><p>Creating a covering index essentially means duplicating lots of columns (or even the whole table), so it could become a pricey solution in terms of disk usage. But the benefit of a covering index is that it keeps all the included data physically close in an order defined by the index, so looking deeper for results would become faster by reading just the index, without the need for random data access on the table heap.</p>
<h3 id="postfix-search">Postfix search</h3>
<p>Postfix search consists of simply reversing both the column and the input text, and creating an index with the same transformation functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">create</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="n">pref_search_rev_idx</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> </span><span class="p">(</span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="p">,</span><span class="w"> </span><span class="n">reverse</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="n">name</span><span class="p">)))</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- query
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">prepare</span><span class="w"> </span><span class="n">mas3</span><span class="p">(</span><span class="nb">text</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">reverse</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="n">name</span><span class="p">))</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="n">reverse</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="err">$</span><span class="mi">1</span><span class="p">))</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">limit</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span></span></span></code></pre></div><p>Same execution plan and caveats apply just like for the prefix search.</p>
<h2 id="infix-search">Infix search</h2>
<p>This is a more common way of searching, when the input text can be anywhere within a string - the infix search. Infix search is when the input text is surrounded with <code>%</code> signs, for example <code>ILIKE %input text%</code>. How to speed up such query?</p>
<p>Most common way in PostgreSQL is to use the <a href="https://www.postgresql.org/docs/12/pgtrgm.html">pg_trgm</a> extension which supports pattern search operators (<code>LIKE</code>, <code>ILIKE</code>, <code>~*</code>), and then create a GIN (or GiST) index over the text column:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- add extension
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">create</span><span class="w"> </span><span class="n">extension</span><span class="w"> </span><span class="n">pg_trgm</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- create GIN index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">create</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="n">ma_name_gin_idx</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> </span><span class="k">using</span><span class="w"> </span><span class="n">gin</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">gin_trgm_ops</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- query
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">prepare</span><span class="w"> </span><span class="n">mas5</span><span class="p">(</span><span class="nb">text</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">ilike</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">limit</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span></span></span></code></pre></div><p>There is a huge performance gain when doing it this way. With the reasonable amount of data, it should be enough to keep the response time short. But what when it isn&rsquo;t enough? Is there anything else that can be done?</p>
<p>If you look at the execution plan of the query above, it does involve several steps, including sorting:</p>





<pre tabindex="0"><code>=&gt; explain (costs off) execute mas5(&#39;the&#39;);
                                QUERY PLAN
---------------------------------------------------------------------------
 Limit
   -&gt;  Sort
         Sort Key: rating DESC
         -&gt;  Bitmap Heap Scan on music_artist
               Recheck Cond: (((name)::text ~~* &#39;%the%&#39;::text) AND active)
               -&gt;  Bitmap Index Scan on ma_name_gin_idx
                     Index Cond: ((name)::text ~~* &#39;%the%&#39;::text)</code></pre><p>Addressing this requires a little bit more of creativity.</p>
<h3 id="gist-index">GiST index</h3>
<p>The <a href="https://www.postgresql.org/docs/12/pgtrgm.html">pg_trgm</a> extension can also use the GiST index for pattern search indexing, even though the GIN is generally recommended as being faster in this particular use-case. GiST is also &ldquo;lossy&rdquo;, which affects performance.</p>
<p>What is special about GiST index? This index can <a href="https://www.alibabacloud.com/blog/sorting-gist-indexes-by-leveraging-nearest-neighbor-enhancement-in-postgresql-9-1_597005">use</a> the <a href="https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm">k-nearest neighbours</a> algorithm to sort the results via distance (<code>&lt;-&gt;</code>) operator, whereas GIN index doesn&rsquo;t support sorting at all.</p>
<p>Since GiST index doesnt support scalar values by default, and <strong>rating</strong> column is a scalar (bigint), firstly we&rsquo;ll need an <a href="https://www.postgresql.org/docs/12/btree-gist.html">extension</a> to enable such support:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="n">extension</span><span class="w"> </span><span class="n">btree_gist</span><span class="p">;</span></span></span></code></pre></div><p>Now, let&rsquo;s create a GiST index on the table (note: any previously created indexes should be dropped). Order of the columns is not important:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="n">ma_name_gist_idx</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> </span><span class="k">using</span><span class="w"> </span><span class="n">gist</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">gist_trgm_ops</span><span class="p">,</span><span class="w"> </span><span class="n">rating</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="p">;</span></span></span></code></pre></div><p>A query that will utilize the new index can be written like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">prepare</span><span class="w"> </span><span class="n">mas6</span><span class="p">(</span><span class="nb">text</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">ilike</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">rating</span><span class="w"> </span><span class="o">&lt;-&gt;</span><span class="w"> </span><span class="mi">50000</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">limit</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span></span></span></code></pre></div><p>Explain plan looks far simpler now:</p>





<pre tabindex="0"><code>=&gt; explain (costs off) execute mas6(&#39;the&#39;);
                               QUERY PLAN
-------------------------------------------------------------------------
 Limit
   -&gt;  Index Scan using ma_name_gist_idx on music_artist
         Index Cond: ((name)::text ~~* ((&#39;%&#39;::text || $1) || &#39;%&#39;::text))
         Order By: (rating &lt;-&gt; &#39;50000&#39;::bigint)</code></pre><p>Value <strong>50000</strong> here is the value equal or larger than the maximum value of the <strong>rating</strong> column in the table, so that results are retrieved in an descending order. What is important to notice here is that the distance operator <strong><em>needs a constant</em></strong>. If you try to use a subquery instead of value 50000, index-enabled sorting will not trigger, and a <code>Sort</code> operation will show up in the execution plan! This means that you should have this value collected beforehand, if you&rsquo;d like to use the search in this way.</p>
<blockquote>
<p><strong>Note</strong>: be wary of using <em>bigint</em> type with this approach, as there seems to be a bug if you try to use an overly large value as a constant, which could mess up the search results. I even <a href="https://stackoverflow.com/questions/67116247/strange-sorting-behavior-with-bigint-column-via-gist-index-in-postgresql">asked a question</a> on Stack Overflow about this, but there doesn&rsquo;t seem to be an answer.</p>
</blockquote>
<h3 id="caveats-1">Caveats</h3>
<p>This way of indexing suffers from the same problem as the prefix/postfix search. Lesser the popularity, bigger the search time. Unfortunately, it&rsquo;s performance cannot be improved further with a covering index. GiST index does support covering, but not all operator classes will trigger the index-only scan. And it seems that it won&rsquo;t trigger in this very use-case.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Whether you will use standard index, GIN or GiST to speed up your search depends on what your goal is, and on how much data do you have. I hope I&rsquo;ve managed to give some insight into pros and cons for each of them when it comes to performance of text pattern searching. However, if a relational database is not up to the task of searching lots of text, perhaps using a specialized tool (i.e. Elastic Search) would be a better option.</p>
<h2 id="further-reading">Further reading</h2>
<ul>
<li>I highly recommend visiting <a href="https://use-the-index-luke.com/">Use The Index, Luke!</a> website by Markus Winand, where you can learn all the power of database indexing and SQL, a much needed skill if your job description includes databases</li>
<li>If you&rsquo;d like to see more performance tuning examples, I have a GitHub <a href="https://github.com/drazengolic/music-streamer-db">repo</a> where I&rsquo;ve dealt with optimization techniques similar to the ones in this article, and also with some of the data denormalization strategies</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Убрзавање претраге по текстуалном шаблону у PostgreSQL</title>
      <link>https://www.drazengolic.com/sr/blog/text-search-postgres/</link>
      <pubDate>Fri, 16 Jul 2021 23:33:12 +0200</pubDate>
      
      <guid>https://www.drazengolic.com/sr/blog/text-search-postgres/</guid>
      <description>Увод Претпоставимо да имамо табелу са уписима коју желимо да претражујемо по неком текстуалном атрибуту, као што је име или наслов. Такође желимо да сортирамо те уписе на начин који није нужно повезан ни са именом ни називом - на примјер, желимо да прво прикажемо најновије уписе, или оне најпопуларније. Након неког времена, број уписа у табели се повећао, претрага постаје све спорија, и морамо некако да је убрзамо. Какве су нам опције на располагању?</description>
      <content:encoded><![CDATA[<h2 id="увод">Увод</h2>
<p>Претпоставимо да имамо табелу са уписима коју желимо да претражујемо по неком текстуалном атрибуту, као што је име или наслов. Такође желимо да сортирамо те уписе на начин који није нужно повезан ни са именом ни називом - на примјер, желимо да прво прикажемо најновије уписе, или оне најпопуларније. Након неког времена, број уписа у табели се повећао, претрага постаје све спорија, и морамо некако да је убрзамо. Какве су нам опције на располагању?</p>
<p>У наредним редовима видјећемо неке од техника оптимизације SQL перформанси, са акцентом на избјегавању операције сортирања као потенцијално <a href="https://use-the-index-luke.com/sql/sorting-grouping">скупе операције</a>.</p>
<p>За примјер ћемо користити табелу која садржи податке о различитим музичким извођачима:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">integer</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="nb">character</span><span class="w"> </span><span class="nb">varying</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">cover_photo</span><span class="w"> </span><span class="nb">character</span><span class="w"> </span><span class="nb">varying</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">short_bio</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">active</span><span class="w"> </span><span class="nb">boolean</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">rating</span><span class="w"> </span><span class="nb">bigint</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span></span></span></code></pre></div><p>Иако се неки од концепата могу искористити у различитим системима база података, овај чланак се примарно бави са PostgreSQL и његовим могућностима.</p>
<h2 id="префикснапостфиксна-претрага">Префиксна/постфиксна претрага</h2>
<p>Иако претрага за текст који почиње (или завршава) на одређени начин није тако честа, технику вриједи описати из разлога што се оптимизација може постићи стандардним b-tree индексом.</p>
<p>Префикс и постфикс претрага користе <code>LIKE</code> оператор, са знаком <code>%</code> на крају (префикс), или на почетку (постфикс) текста за који претражујемо уписе. Како претрага не би била осјетљива на мала и велика слова, можемо да користимо <code>ILIKE</code> оператор, или да се и улазни и уписани текст конвертују у сва мала или сва велика слова.</p>
<h3 id="префиксна-претрага">Префиксна претрага</h3>
<p>Упит за префиксну претрагу написан као припремљени исказ може да изгледа овако:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">prepare</span><span class="w"> </span><span class="n">mas</span><span class="p">(</span><span class="nb">text</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">ilike</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">limit</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span></span></span></code></pre></div><p>Извршавањем наредбе <code>explain</code> на овај упит показује да је потребно секвенцијално очитати цијелу табелу, све резултате сортирати у радној меморији, а затим одабрати првих 5 резултата:</p>





<pre tabindex="0"><code>=&gt; explain execute mas(&#39;the&#39;);
                                           QUERY PLAN
------------------------------------------------------------------------------------------------
 Limit  (cost=29890.60..29891.17 rows=5 width=50)
   -&gt;  Gather Merge  (cost=29890.60..34297.28 rows=38319 width=50)
         Workers Planned: 1
         -&gt;  Sort  (cost=28890.59..28986.39 rows=38319 width=50)
               Sort Key: rating DESC
               -&gt;  Parallel Seq Scan on music_artist  (cost=0.00..28254.12 rows=38319 width=50)
                     Filter: (active AND ((name)::text ~~* &#39;the%&#39;::text))</code></pre><p>Како b-tree индекс подржава префиксну претрагу текста (осјетљиво на мала/велика слова), можемо креирати индекс који ће садржати колоне <strong>name</strong> и <strong>rating</strong>, са текстом из колоне <strong>name</strong> конвертованим у сва мала слова:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="n">pref_search_idx</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> </span><span class="p">(</span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="p">,</span><span class="w"> </span><span class="k">lower</span><span class="p">(</span><span class="n">name</span><span class="p">))</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="p">;</span></span></span></code></pre></div><p>Овај индекс је парцијални, заснован на функцијама трансформације, који чува трансформисане податке за све уписе који имају колону <strong>active</strong> постављену на <code>true</code>. Како нас занимају само најбоље оцјењени резултати, искористићемо модификатор за опадајући редослијед <code>desc</code> на колони <strong>rating</strong>, и такође ћемо је поставити на прво мјесто приликом дефиниције индекса, јер редослијед мора да се поклапа са редослиједом у <code>ORDER BY</code> клаузули.</p>
<p>Како би се ажурирала статистика у систему након креирања индекса, искористићемо команду<code>analyze music_artist;</code>.</p>
<p>Сада упит може да се препише да користи нови индекс тако што ћемо да искористимо <code>LIKE</code> оператор, а колону и улазни текст трансформишемо у сва мала слова:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">prepare</span><span class="w"> </span><span class="n">mas2</span><span class="p">(</span><span class="nb">text</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="k">lower</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="k">lower</span><span class="p">(</span><span class="err">$</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">limit</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span></span></span></code></pre></div><p>План извршавања новог упита сада садржи само скенирање индекса (index scan) који се зауставља чим се пронађе првих 5 резултата:</p>





<pre tabindex="0"><code>=&gt; explain execute mas2(&#39;the&#39;);
                                            QUERY PLAN
--------------------------------------------------------------------------------------------------
 Limit  (cost=0.43..36.77 rows=5 width=50)
   -&gt;  Index Scan using pref_search_idx on music_artist  (cost=0.43..58586.92 rows=8061 width=50)
         Filter: (lower((name)::text) ~~ &#39;the%&#39;::text)</code></pre><p>Вријеме одзива је сада побољшано са више стотина милисекунди на свега неколико милисекунди (у тестном окружењу са око 1.6 милиона уписа у табели)!</p>
<p>Као што видимо, у плану извршавања нема <code>Sort</code> операције, што значи да су резултати већ сортирани, и није потребно додатно сортирање.</p>
<h3 id="недостаци">Недостаци</h3>
<p>Док ће извлачење првих неколико резултата бити изузетно брзо, пад перформанси ће се примјетити када претрага буде морала да зађе дубље како би нашла лошије оцијењене уписе. Уколико у том случају перформансе буду изузетно лоше, могуће их је додатно побољшати помоћу покривајућег индекса (умјесто претходног), односно индекса који садржи све колоне из упита:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- covering index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">create</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="n">pref_search_idx</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> </span><span class="p">(</span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="p">,</span><span class="w"> </span><span class="k">lower</span><span class="p">(</span><span class="n">name</span><span class="p">))</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">include</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">cover_photo</span><span class="p">,</span><span class="w"> </span><span class="n">short_bio</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- new query
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">prepare</span><span class="w"> </span><span class="n">mas4</span><span class="p">(</span><span class="nb">text</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">cover_photo</span><span class="p">,</span><span class="w"> </span><span class="n">short_bio</span><span class="p">,</span><span class="w"> </span><span class="n">rating</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="k">lower</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="k">lower</span><span class="p">(</span><span class="err">$</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">limit</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span></span></span></code></pre></div><p>Креирање покривајућег индекса у суштини значи дуплирање података из много колона (или чак цијеле табеле), и потенцијално је скупо рјешење у смислу потребног капацитета дискова. Али предност покривајућег индекса је што све укључене податке држи физички близу у предефинисаном редослиједу, тако да претрага дубље у податке постаје значајно бржа, јер нема потребе за насумичним приступањем подацима из табеле на диску.</p>
<h3 id="постфиксна-претрага">Постфиксна претрага</h3>
<p>Постфиксна претрага се састоји од тога тако што се једноставно обрну улазни текст и текст из колоне, и креира индекс са истим функцијама трансформације:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">create</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="n">pref_search_rev_idx</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> </span><span class="p">(</span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="p">,</span><span class="w"> </span><span class="n">reverse</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="n">name</span><span class="p">)))</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- query
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">prepare</span><span class="w"> </span><span class="n">mas3</span><span class="p">(</span><span class="nb">text</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">reverse</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="n">name</span><span class="p">))</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="n">reverse</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="err">$</span><span class="mi">1</span><span class="p">))</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">limit</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span></span></span></code></pre></div><p>План извршавања, као и недостаци, су исти као и за префиксну претрагу.</p>
<h2 id="инфиксна-претрага">Инфиксна претрага</h2>
<p>Ово је знатно чешћи начин претраге, када улазни текст може да буде било гдје у уписаном тексту, односно инфиксна претрага. Ова претрага се врши тако што се улазни текс окружи са <code>%</code> знаковима, нпр. <code>ILIKE %input text%</code>. Како убрзати такву претрагу?</p>
<p>Најчешћи начин за PostgreSQL је кориштење екстензије <a href="https://www.postgresql.org/docs/12/pgtrgm.html">pg_trgm</a> која подржава операторе шаблонске претраге (<code>LIKE</code>, <code>ILIKE</code>, <code>~*</code>), а онда се креира GIN (или GiST) индекс над текстуалном колоном:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- add extension
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">create</span><span class="w"> </span><span class="n">extension</span><span class="w"> </span><span class="n">pg_trgm</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- create GIN index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">create</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="n">ma_name_gin_idx</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> </span><span class="k">using</span><span class="w"> </span><span class="n">gin</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">gin_trgm_ops</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- query
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">prepare</span><span class="w"> </span><span class="n">mas5</span><span class="p">(</span><span class="nb">text</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">ilike</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">rating</span><span class="w"> </span><span class="k">desc</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">limit</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span></span></span></code></pre></div><p>Перформансе су значајно повећане на овај начин. Са разумном количином података, ова техника је довољна да се вријеме одзива држи довољно ниским. Али шта ако није довољно ниско? Шта још може да се уради?</p>
<p>Ако погледамо план извршавања од упита изнад, видимо да укључује неколико корака, укључујући сортирање:</p>





<pre tabindex="0"><code>=&gt; explain (costs off) execute mas5(&#39;the&#39;);
                                QUERY PLAN
---------------------------------------------------------------------------
 Limit
   -&gt;  Sort
         Sort Key: rating DESC
         -&gt;  Bitmap Heap Scan on music_artist
               Recheck Cond: (((name)::text ~~* &#39;%the%&#39;::text) AND active)
               -&gt;  Bitmap Index Scan on ma_name_gin_idx
                     Index Cond: ((name)::text ~~* &#39;%the%&#39;::text)</code></pre><p>Рјешавање овог проблема захтјева нешто више креативности.</p>
<h3 id="gist-индекс">GiST индекс</h3>
<p>Екстензија <a href="https://www.postgresql.org/docs/12/pgtrgm.html">pg_trgm</a> такође може да користи и GiST индекс за шаблонску претрагу текста, иако се GIN индекс генерално препоручује као бржи у оваквим случајевима. GiST такође интерно може да има ”лажно позитивне” резултате, што утиче на перформансе.</p>
<p>Шта је посебно у вези GiST индекса? Овај индекс може да <a href="https://www.alibabacloud.com/blog/sorting-gist-indexes-by-leveraging-nearest-neighbor-enhancement-in-postgresql-9-1_597005">користи</a> тзв. алгоритам <a href="https://sr.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%B0%D0%BC_%D0%BA_%D0%BD%D0%B0%D1%98%D0%B1%D0%BB%D0%B8%D0%B6%D0%B8%D1%85_%D1%81%D1%83%D1%81%D0%B5%D0%B4%D0%B0">k-најближих сусједа</a> како би сортирао резултате помоћу оператора удаљености (<code>&lt;-&gt;</code>), док GIN индекс не подржава сортирање уопште.</p>
<p>Како GiST индекс не подржава скаларне вриједности сам по себи, а <strong>rating</strong> колона је скаларна вриједност (број типа bigint), прво нам је потребна <a href="https://www.postgresql.org/docs/12/btree-gist.html">екстензија</a> која омогућава такву употребу:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="n">extension</span><span class="w"> </span><span class="n">btree_gist</span><span class="p">;</span></span></span></code></pre></div><p>Сада креирајмо GiST индекс над табелом (напомена: претходно креирани индекси треба да се уклоне). Редослијед колона није важан:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="n">ma_name_gist_idx</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> </span><span class="k">using</span><span class="w"> </span><span class="n">gist</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">gist_trgm_ops</span><span class="p">,</span><span class="w"> </span><span class="n">rating</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="p">;</span></span></span></code></pre></div><p>Упит који ће да искористи нови индекс може да се напише овако:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">prepare</span><span class="w"> </span><span class="n">mas6</span><span class="p">(</span><span class="nb">text</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">music_artist</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">ilike</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">rating</span><span class="w"> </span><span class="o">&lt;-&gt;</span><span class="w"> </span><span class="mi">50000</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">limit</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span></span></span></code></pre></div><p>Сада план извршавања изгледа много једноставније:</p>





<pre tabindex="0"><code>=&gt; explain (costs off) execute mas6(&#39;the&#39;);
                               QUERY PLAN
-------------------------------------------------------------------------
 Limit
   -&gt;  Index Scan using ma_name_gist_idx on music_artist
         Index Cond: ((name)::text ~~* ((&#39;%&#39;::text || $1) || &#39;%&#39;::text))
         Order By: (rating &lt;-&gt; &#39;50000&#39;::bigint)</code></pre><p>Вриједност <strong>50000</strong> овде је вриједност већа или једнака максималној вриједности из <strong>rating</strong> колоне, како би резултати били добијени у опадајућем редослиједу. Оно што је важно напоменути овде је да за оператор дистанце <strong><em>потребна константа</em></strong>. Ако покушамо да вриједност 50000 добијемо преко угњежденог упита, сортирање помоћу индекса неће бити активирано, и операција <code>Sort</code> ће да се појави у плану извршавања! То значи да ова вриједност мора да буде претходно прикупљена, у случају да се претрага обавља на овај начин.</p>
<blockquote>
<p><strong>Напомена</strong>: опрезно са кориштењем колона типа <em>bigint</em> са овим приступом, јер чини се да постоји грешка приликом кориштења високих вриједности за константу, која може да поремети редослијед резултата. Чак сам <a href="https://stackoverflow.com/questions/67116247/strange-sorting-behavior-with-bigint-column-via-gist-index-in-postgresql">поставио питање</a> на Stack Overflow на ову тему, али чини се да нема одговора.</p>
</blockquote>
<h3 id="недостаци-1">Недостаци</h3>
<p>Овај начин индексирања пати од истих проблема као и префиксна/постиксна претрага. Што је мања оцјена, дуже је вријеме претраге. Нажалост, не може даље да се побољша кориштењем покривајућег индекса. GiST индекс подржава покривајуће индексирање, али скенирање самог индекса неће бити активирано за све класе оператора, што се чини да је овде случај.</p>
<h2 id="закључак">Закључак</h2>
<p>Да ли ћете користити стандардни индекс, GIN или GiST како би убрзали претрагу, зависи од тога шта је циљ, као и од количине прикупљених података. Надам се да сам дао увид у предности и мане за сваки од њих када је у питању претрага текста по шаблону. Међутим, ако релациона база података није довољно добра за претрагу веће количине текста, можда би било боље искористити специјализовани алат за претрагу текста, као нпр. Elastic Search.</p>
<h2 id="додатна-литература">Додатна литература</h2>
<ul>
<li>Топло препоручујем веб сајт <a href="https://use-the-index-luke.com/">Use The Index, Luke!</a> који води Маркус Винанд, гдје може много да се научи о индексирању података и SQL-у, пријеко потребном знању за сваког чији опис посла укључује рад са базама података</li>
<li>Ако неког интересује више примјера из области оптимизације перформанси, направио сам GitHub <a href="https://github.com/drazengolic/music-streamer-db">репозиторијум</a> гдје сам се бавио техникама оптимизације сличним онима описаним у овом чланку, као и неким стратегијама денормализације података</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>QR4DOC</title>
      <link>https://www.drazengolic.com/sr/qr4doc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.drazengolic.com/sr/qr4doc/</guid>
      <description>QR4DOC Напомена: у потрази сам за даљим финансирањем развоја овог пројекта, а могуће је и откупити постојећи изворни код. Уколико има неко заинтересован да гура пројекат даље на било који начин, молио бих да ме контактира.
Опис Кратко постојећи SaaS производ развијен за валидацију, допунске информације, као и нотификације о озмјенама за штампане документе, примарно намијењен за полисе осигурања.
Сервис генерише јединствени линк који се затим угради у документ у виду QR кода.</description>
      <content:encoded><![CDATA[<h1 id="qr4doc">QR4DOC</h1>
<p><em><strong>Напомена:</strong> у потрази сам за даљим финансирањем развоја овог пројекта, а могуће је и откупити постојећи изворни код. Уколико има неко заинтересован да гура пројекат даље на било који начин, молио бих да ме контактира.</em></p>
<h2 id="опис">Опис</h2>
<p>Кратко постојећи SaaS производ развијен за валидацију, допунске информације, као и нотификације о озмјенама за штампане документе, примарно намијењен за полисе осигурања.</p>
<p>Сервис генерише јединствени линк који се затим угради у документ у виду QR кода. Скенирањем кода и отварањем линка биће приказан резиме документа (свих његових верзија) како би се <strong>визуелно упоредио</strong> са важним елементима из документа, као метод утврђивања да ли је документ <strong>фалсификат</strong> или је <strong>застарио</strong>. Приказ такође може да садржи неке екстерне линкове везане за документ (попут линка за плаћање, контакта и сл.), а могуће је и претплатити се на обавјештења о новим верзијама или о промјени статуса, уколико је статус додјељен документу.</p>
<h2 id="технички-детаљи">Технички детаљи</h2>
<p>Примарни сервис:</p>
<ul>
<li>Тзв. вишестанарска (по издавачу документа), вишејезична апликација која садржи веб кориснички интерфејс и JSON API, станарство је засновано на комбинацији засебних PostgreSQL шема са станарским кључем</li>
<li>Креирање издавача и њихова ограничења у кориштењу (зависно од нивоа претплате, ручно се подешава), глобална ограничења кориштења и обраде захтјева, креирање и пријављивање корисника, креирање картотека и докумената (документи могу само да се додају), маскирање детаља докумената, форма за притужбе посјетилаца, основна статистика о посјетиоцима, web push нотификације</li>
<li>QR и DataMatrix кодови за генерисане јединствене линкове</li>
<li>Развијено у технологијама <a href="https://elixir-lang.org/">Elixir</a> + <a href="https://www.phoenixframework.org/">Phoenix LiveView</a> + <a href="https://tailwindcss.com/">Tailwind</a> + хакови, објављено као systemd сервис на Ubuntu машини иза <a href="https://caddyserver.com/">Caddy</a> прокси сервера, blue-green објављивање преко специјалних bash скрипти (извршни програм се компајлира локално)</li>
<li>Преводи на: Енглески, Српски (ћирилица), Босански, Хрватски</li>
</ul>
<p>Секундарни (нетестирани) сервис:</p>
<ul>
<li>API за мобилну апликацију са посебним <a href="https://www.drazengolic.com/sr/blog/secure-mobile-api/">системом за ауторизацију</a> преко јавних кључева, претплаћивање на push нотификације и њихова достава путем <a href="https://firebase.google.com/docs/cloud-messaging/">FCM</a> или Huawei PushKit</li>
<li>Развијен у Go језику, са крајњим циљем да се сва функционалност пребаци из примарног сервиса у овај, ради побољшања портабилности и дугорочне одрживости апликације.</li>
</ul>
<p>Мобилна апликација је планирана, али није развијена.</p>
<h2 id="неке-слике-екрана">Неке слике екрана</h2>
<div style="column-count: 2;">
  <a href="/images/qr4doc/1.png"><img alt="Приказ документа" src="/images/qr4doc/1.png"></a>
<a href="/images/qr4doc/2.png"><img alt="Почетни екран" src="/images/qr4doc/2.png"></a>
<a href="/images/qr4doc/3.png"><img alt="Претрага докумената" src="/images/qr4doc/3.png"></a>
<a href="/images/qr4doc/4.png"><img alt="Обрада докумената" src="/images/qr4doc/4.png"></a>
</div>


]]></content:encoded>
    </item>
    
    <item>
      <title>QR4DOC</title>
      <link>https://www.drazengolic.com/qr4doc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.drazengolic.com/qr4doc/</guid>
      <description>QR4DOC Note: this project is in search for funding, or it&amp;rsquo;s source code is for sale. If you are interested in pushing this project forward, please do reach out to me.
Description A short-lived SaaS developed for validation, supplemental information, and notification on change for printed documents, originally intended for insurance policies.
It generates a unique link that gets embedded in the document in the form of a QR code. Scanning the code and opening the link will display a document summary (for all it&amp;rsquo;s versions) for a visual comparison of important document elements as a method of checking if the print is a fraud copy or obsolete.</description>
      <content:encoded><![CDATA[<h1 id="qr4doc">QR4DOC</h1>
<p><em><strong>Note:</strong> this project is in search for funding, or it&rsquo;s source code is for sale. If you are interested in pushing this project forward, please do reach out to me.</em></p>
<h2 id="description">Description</h2>
<p>A short-lived SaaS developed for validation, supplemental information, and notification on change for printed documents, originally intended for insurance policies.</p>
<p>It generates a unique link that gets embedded in the document in the form of a QR code. Scanning the code and opening the link will display a document summary (for all it&rsquo;s versions) for a <strong>visual comparison</strong> of important document elements as a method of checking if the print is a <strong>fraud copy</strong> or <strong>obsolete</strong>. The page can also contain multiple web links (think Linktree) relevant for the document, and visitors can subscribe for notifications on new document versions, or the change of it&rsquo;s status if it has any.</p>
<h2 id="technical-details">Technical details</h2>
<p>Primary service:</p>
<ul>
<li>Multi-tenant (per document issuer), multilingual application that hosts the Web UI and a JSON API, tenancy is based on combination of separate PostgreSQL schemas and a tenant key</li>
<li>Issuer creation and usage limits (depending on subscription, manually configured), global usage limits &amp; request throttling, User creation and auth, file &amp; document creation (documents are append only), document detail masking, visitor complaint forms, basic visitor stats, web push notifications on file update</li>
<li>QR and DataMatrix codes for generated file URLs</li>
<li>Developed in <a href="https://elixir-lang.org/">Elixir</a> + <a href="https://www.phoenixframework.org/">Phoenix LiveView</a> + <a href="https://tailwindcss.com/">Tailwind</a> + hacks, deployed as systemd service on an Ubuntu box behind a <a href="https://caddyserver.com/">Caddy</a> server proxy, blue-green deployment via custom bash scripts (binaries built locally)</li>
<li>Translations for: English, Serbian (cyrillic), Bosnian, Croatian</li>
</ul>
<p>Secondary (untested) service:</p>
<ul>
<li>Mobile API service with a <a href="https://www.drazengolic.com/blog/secure-mobile-api/">custom public key authentication</a>, push notification subscriptions and delivery via <a href="https://firebase.google.com/docs/cloud-messaging/">FCM</a> or Huawei PushKit</li>
<li>Developed in Go language, with an end-goal to port all functionality from the primary service in order to improve portability and maintainability of the project</li>
</ul>
<p>Mobile client app was planned, but not developed.</p>
<h2 id="some-screenshots">Some screenshots</h2>
<div style="column-count: 2;">
  <a href="/images/qr4doc/1.png"><img alt="Document view" src="/images/qr4doc/1.png"></a>
<a href="/images/qr4doc/2.png"><img alt="Home screen" src="/images/qr4doc/2.png"></a>
<a href="/images/qr4doc/3.png"><img alt="Document search" src="/images/qr4doc/3.png"></a>
<a href="/images/qr4doc/4.png"><img alt="Document edit" src="/images/qr4doc/4.png"></a>
</div>


]]></content:encoded>
    </item>
    
  </channel>
</rss>